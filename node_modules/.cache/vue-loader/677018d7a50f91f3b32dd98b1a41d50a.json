{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kali/Documents/web_application/new-unitsoft-intranet-FE/node_modules/vue-badger-accordion/src/BadgerAccordion.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kali/Documents/web_application/new-unitsoft-intranet-FE/node_modules/vue-badger-accordion/src/BadgerAccordion.vue","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport BadgerAccordion from 'badger-accordion'\n\n// Helper-function to unwrap child-component-wrapper\nfunction unwrap(wrapper) {\n    // place childNodes in document fragment\n    var docFrag = document.createDocumentFragment();\n    while (wrapper.firstChild) {\n        var child = wrapper.removeChild(wrapper.firstChild);\n        docFrag.appendChild(child);\n    }\n\n    // replace wrapper with document fragment\n    wrapper.parentNode.replaceChild(docFrag, wrapper);\n}\n\nexport default {\n    name: 'BadgerAccordion',\n    props: {\n        options: {\n            type: Object,\n            default() {\n                return {}\n            }\n        },\n        icons: {\n            default() {\n                return {opened: '-', closed: '+'}\n            }\n        },\n        iconComponent: {\n          default: null\n        },\n    },\n    data() {\n        return {\n            accordion: null,\n            itemsReady: false,\n            show: true,\n            rerendering: false,\n            children: this.$children,\n        }\n    },\n    watch: {\n        \"accordion.states\": {\n            handler(states) {\n                this.calculateAllPanelsHeight();\n                this.$children.forEach((child, n) => {\n                    if (typeof states[n] == 'object') {\n                        child.changeState(states[n].state == 'open');\n                    }\n                });\n            },\n            deep: true\n        }\n    },\n    created() {\n        // On child-item rendered initiate badger-accordion\n        this.$on('item:ready', () => {\n            // Unwrap child-wrapper due issues with badger-accordion\n            unwrap(this.$refs.badger.querySelector('.badger-accordion-item'));\n            // Init badger-accordion if child-component is loaded\n            this.accordion = new BadgerAccordion(this.$refs.badger, (this.options || {}))\n            this.$forceUpdate();\n        });\n    },\n\n    mounted() {\n        this.$watch(() => {\n            return this.children.length;\n        }, (items) => {\n            this.rerender();\n        })\n    },\n\n    methods: {\n        init() {\n            this.accordion.init()\n        },\n        getState(headerIds = []) {\n            return this.accordion.getState(headerIds)\n        },\n        open(headerIndex) {\n            this.accordion.open(headerIndex)\n        },\n        close(headerIndex) {\n            this.accordion.close(headerIndex)\n        },\n        togglePanel(animationAction, headerIndex) {\n            this.accordion.togglePanel(animationAction, headerIndex)\n        },\n        openAll() {\n            this.accordion.openAll()\n        },\n        closeAll() {\n            this.accordion.closeAll()\n        },\n        calculateAllPanelsHeight() {\n            this.accordion.calculateAllPanelsHeight()\n        },\n        calculatePanelHeight(panel) {\n            this.accordion.calculatePanelHeight(panel)\n        },\n        rerender() {\n            if(!this.rerendering) {\n                this.rerendering = true;\n                this.show = false;\n                this.$nextTick(() => {\n                    this.show = true;\n                    this.$nextTick(() => {\n                        this.rerendering = false;\n                    })\n                });\n            }\n        },\n    },\n};\n",{"version":3,"sources":["BadgerAccordion.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BadgerAccordion.vue","sourceRoot":"node_modules/vue-badger-accordion/src","sourcesContent":["<template>\n    <dl class=\"component-badger-accordion\" ref=\"badger\" v-if=\"show\">\n        <slot></slot>\n    </dl>\n</template>\n\n<script>\n    import BadgerAccordion from 'badger-accordion'\n\n    // Helper-function to unwrap child-component-wrapper\n    function unwrap(wrapper) {\n        // place childNodes in document fragment\n        var docFrag = document.createDocumentFragment();\n        while (wrapper.firstChild) {\n            var child = wrapper.removeChild(wrapper.firstChild);\n            docFrag.appendChild(child);\n        }\n\n        // replace wrapper with document fragment\n        wrapper.parentNode.replaceChild(docFrag, wrapper);\n    }\n\n    export default {\n        name: 'BadgerAccordion',\n        props: {\n            options: {\n                type: Object,\n                default() {\n                    return {}\n                }\n            },\n            icons: {\n                default() {\n                    return {opened: '-', closed: '+'}\n                }\n            },\n            iconComponent: {\n              default: null\n            },\n        },\n        data() {\n            return {\n                accordion: null,\n                itemsReady: false,\n                show: true,\n                rerendering: false,\n                children: this.$children,\n            }\n        },\n        watch: {\n            \"accordion.states\": {\n                handler(states) {\n                    this.calculateAllPanelsHeight();\n                    this.$children.forEach((child, n) => {\n                        if (typeof states[n] == 'object') {\n                            child.changeState(states[n].state == 'open');\n                        }\n                    });\n                },\n                deep: true\n            }\n        },\n        created() {\n            // On child-item rendered initiate badger-accordion\n            this.$on('item:ready', () => {\n                // Unwrap child-wrapper due issues with badger-accordion\n                unwrap(this.$refs.badger.querySelector('.badger-accordion-item'));\n                // Init badger-accordion if child-component is loaded\n                this.accordion = new BadgerAccordion(this.$refs.badger, (this.options || {}))\n                this.$forceUpdate();\n            });\n        },\n\n        mounted() {\n            this.$watch(() => {\n                return this.children.length;\n            }, (items) => {\n                this.rerender();\n            })\n        },\n\n        methods: {\n            init() {\n                this.accordion.init()\n            },\n            getState(headerIds = []) {\n                return this.accordion.getState(headerIds)\n            },\n            open(headerIndex) {\n                this.accordion.open(headerIndex)\n            },\n            close(headerIndex) {\n                this.accordion.close(headerIndex)\n            },\n            togglePanel(animationAction, headerIndex) {\n                this.accordion.togglePanel(animationAction, headerIndex)\n            },\n            openAll() {\n                this.accordion.openAll()\n            },\n            closeAll() {\n                this.accordion.closeAll()\n            },\n            calculateAllPanelsHeight() {\n                this.accordion.calculateAllPanelsHeight()\n            },\n            calculatePanelHeight(panel) {\n                this.accordion.calculatePanelHeight(panel)\n            },\n            rerender() {\n                if(!this.rerendering) {\n                    this.rerendering = true;\n                    this.show = false;\n                    this.$nextTick(() => {\n                        this.show = true;\n                        this.$nextTick(() => {\n                            this.rerendering = false;\n                        })\n                    });\n                }\n            },\n        },\n    };\n</script>\n"]}]}