{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kali/Documents/web_application/FE/src/components/teachers/TeacherInformation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kali/Documents/web_application/FE/src/components/teachers/TeacherInformation.vue","mtime":1568983908577},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport StudentService from '../../service/students.js';\nimport TeacherService from '../../service/teachers.js';\nimport DiaryStudent from './DiaryStudent.vue';\nimport DiaryTeacher from './DiaryTeacher.vue';\nimport SelectForm from '../form/SelectForm.vue';\nimport Date from '../form/Date.vue';\nimport Time from '../form/Time.vue';\nimport Utility from '../../Utility/Utility.js';\n\nexport default {\n    name: 'TeacherInformation',\n    mounted() {\n        $('.collapsible').collapsible();\n        this.$store.dispatch('fetchLessons');\n        this.$store.dispatch('fetchStudents');\n        this.fetchTeacher();\n        this.fetchTeacherDiarys();\n    },\n    data() {\n        return {\n            Teacher: {\n                name: '',\n                department: '',\n                phone: '',\n            },\n            ModifyingTeacher: false,\n            CompletedDiarys: [],\n            noneCompletedDiarys: [],\n            Diary: {\n                lesson_type: null,\n                lesson_time: {\n                    date: Utility.getDateBaseNow(0, 0, 0),\n                    start: Utility.getTimeBaseNow(-3, 0),\n                    end: Utility.getTimeBaseNow(0, 0),\n                },\n            },\n            idSelectAll: false,\n            Pay: {\n                Time: 0,\n                Count: 0,\n            },\n            SelectedStudent: null,\n            StudentDiarys: new Map(),\n            load: {\n                start: Utility.getDateBaseNow(0, -1, 0),\n                end: Utility.getDateBaseNow(0, 0, 0),\n            },\n        };\n    },\n    computed: {\n        getStudents() {\n            const StudentsInfo = this.$store.getters.getStudents;\n            let ret = [];\n            StudentsInfo.forEach(student => {\n                ret.push({\n                    id: student._id,\n                    name: student.name,\n                });\n            });\n            return ret;\n        },\n        getLessons() {\n            const LessonsInfo = this.$store.getters.getLessons;\n            let ret = [];\n            LessonsInfo.forEach(lesson => {\n                ret.push({\n                    id: lesson._id,\n                    name: lesson.type,\n                });\n            });\n            return ret;\n        },\n    },\n    methods: {\n        AppendStudent() {\n            let Student = null;\n            StudentService.getStudent(this.SelectedStudent)\n                .then((response) => {\n                    Student = response.data.Student;\n                })\n                .catch((error) => {\n                    this.$notify({\n                        title: '데이터를 처리하는 과정에서 오류가 발생했습니다.',\n                        type: 'error',\n                    });\n                });\n            this.StudentDiarys.set(this.SelectedStudent, {name: Student.name});\n            // this.StudentDiarys.forEach(std => {\n            //     alert(JSON.stringify(std));\n            // });\n        },\n        AllSelect() {\n            //\n        },\n        onChangeLessons(value) {\n            this.Diary.lesson_type = value;\n        },\n        onChangeDiaryDate(value) {\n            this.Diary.lesson_time.date = value;\n        },\n        onChangeDiaryStart(value) {\n            this.Diary.lesson_time.start = value;\n        },\n        onChangeDiaryEnd(value) {\n            this.Diary.lesson_time.end = value;\n        },\n        onChangeStudent(value) {\n            this.SelectedStudent = value;\n        },\n        onChangeReloadStart(value) {\n            this.load.start = value;\n        },\n        onChangeReloadEnd(value) {\n            this.load.end = value;\n        },\n        onChangeDiary(value, type, typeValue) {\n            value.lesson_time.date = Utility.StringToDate(value.lesson_time.date);\n            TeacherService.updateTeacherDiary(value._id, {\n                lesson_complete: value.lesson_complete,\n                lesson_time: JSON.stringify(value.lesson_time),\n            })\n                .then(response => {\n                    this.$notify({\n                        title: response.data.msg,\n                        text: '성공!',\n                        type: 'success',\n                    });\n                    if (type === 'Complete') {\n                        this.CompletedDiarys.push(value);\n                        this.noneCompletedDiarys = Utility.removeElemntByValue(this.noneCompletedDiarys, value);\n                        this.Pay.Count--;\n                        this.Pay.Time -= Utility.duration(value.lesson_time.start, value.lesson_time.end);\n                    } else if (type === 'Edit') {\n                        this.Pay.Time += Utility.duration(typeValue.start, typeValue.end) - Utility.duration(value.lesson_time.start, value.lesson_time.end);\n                    }\n                })\n                .catch(error => {\n                    console.log(error);\n                });\n        },\n        modifyTeacher() {\n            this.ModifyingTeacher = true;\n        },\n        doModifyTeacher() {\n            this.ModifyingTeacher = false;\n        },\n        fetchTeacher() {\n            TeacherService.getTeacher(this.$route.params.TeacherId)\n                .then((response) => {\n                    this.Teacher = response.data.Teacher;\n                })\n                .catch((error) => {\n                    this.$notify({\n                        title: '선생님 정보를 가져오는데 문제가 발생했습니다.',\n                        type: 'error',\n                    });\n                });\n        },\n        fetchTeacherDiarys() {\n            while (this.CompletedDiarys.length) this.CompletedDiarys.pop();\n            while (this.noneCompletedDiarys.length) this.noneCompletedDiarys.pop();\n            TeacherService.getTeacherDiaryByTeacherId(this.$route.params.TeacherId, {})\n                .then((response) => {\n                    response.data.Diarys.forEach(diary => {\n                        if (diary.lesson_complete) {\n                            this.CompletedDiarys.push(diary);\n                        } else {\n                            this.noneCompletedDiarys.push(diary);\n                            this.Pay.Time += parseFloat(Utility.duration(diary.lesson_time.start, diary.lesson_time.end));\n                            this.Pay.Count++;\n                        }\n                    })\n                })\n                .catch((error) => {\n                    this.$notify({\n                        title: '에러발생',\n                        type: 'error',\n                    })\n                });\n        },\n        isValidDiaryLesson() {\n            return true;\n        },\n        isValidDiaryTime() {\n            return true;\n        },\n        AddTeacherDiary() {\n            // TODO 선생님 페이지에서 학생 추가 가능하게 할것\n            // if (!this.isValidDiaryLesson()) {\n            //     //\n            // }\n            // if (!this.isValidDiaryTime()) {\n            //     //\n            // }\n            // alert('INIT');\n            TeacherService.addTeacherDiary({\n                teacher: this.$route.params.TeacherId,\n                lesson_time: JSON.stringify(this.Diary.lesson_time),\n                lesson_type: this.Diary.lesson_type,\n            })\n                .then((response) => {\n                    this.$notify({\n                        title: '일지 작성에 성공했습니다.',\n                        type: 'success',\n                    });\n                    this.Pay.Count++;\n                    this.Pay.Time += parseFloat(Utility.duration(response.data.Diary.lesson_time.start, response.data.Diary.lesson_time.end));\n                    this.noneCompletedDiarys.push(response.data.Diary);\n                })\n                .catch((error) => {\n                    this.$notify({\n                        title: '일지 작성에 실패하였습니다.',\n                        type: 'error',\n                    });\n                });\n        },\n    },\n    components: {\n        DiaryStudent,\n        DiaryTeacher,\n        SelectForm,\n        Date,\n        Time,\n    },\n};\n",{"version":3,"sources":["TeacherInformation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"TeacherInformation.vue","sourceRoot":"src/components/teachers","sourcesContent":["<template>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"card\" style=\"\">\n                <div class=\"card-content\">\n                    <h4 class=\"card-title\">{{ Teacher.name }}</h4>\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                            <label for=\"department\" class=\"required\">소속</label>\n                            <input class=\"form-control form-control-lg\" type=\"text\" name=\"department\"\n                                   v-model=\"Teacher.department\"\n                                   id=\"department\" placeholder=\"\" :disabled=\"!ModifyingTeacher\">\n                        </div>\n                        <div class=\"col-12\">\n                            <label for=\"phone\" class=\"required\">전화번호</label>\n                            <input class=\"form-control form-control-lg\" type=\"text\" name=\"phone\" v-model=\"Teacher.phone\" id=\"phone\" placeholder=\"\" :disabled=\"!ModifyingTeacher\">\n                        </div>\n                    </div>\n                    <div class=\"text-center p-t-20\">\n                        <button v-if=\"!ModifyingTeacher\" class=\"btn\" @click=\"modifyTeacher()\" id=\"change-btn\">\n                            <i class=\"icon icon-pencil\"></i> 수정하기\n                        </button>\n                        <button v-else class=\"btn\" @click=\"doModifyTeacher()\" id=\"do-chang-btn\">\n                            <i class=\"icon icon-pencil\"></i>완료\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"card\">\n                <div class=\"card-content\">\n                    <h6 class=\"card-title\">일지 작성</h6>\n                    <Date class=\"col s4\" v-bind:date=\"Diary.lesson_time.date\" label=\"날짜\"\n                          v-on:input=\"onChangeDiaryDate\"></Date>\n                    <Time class=\"col s4\" v-bind:time=\"Diary.lesson_time.start\" label=\"시작 시간\"\n                          v-on:input=\"onChangeDiaryStart\"></Time>\n                    <Time class=\"col s4\" v-bind:time=\"Diary.lesson_time.end\" label=\"종료 시간\"\n                          v-on:input=\"onChangeDiaryEnd\"></Time>\n                    <SelectForm v-bind:selectList=\"getLessons\" v-on:input=\"onChangeLessons\" name=\"수업 종류\"></SelectForm>\n                </div>\n                <div class=\"card-action\">\n                    <a href=\"javascript:void(0);\" style=\"color: #0288d1;\" id=\"add-teacherdiary-btn\" @click=\"AddTeacherDiary()\" name=\"action\">일지추가</a>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"card\">\n                <div class=\"card-content\">\n                    <h4 class=\"card-title\">일지</h4>\n                    <h5>횟수({{ Pay.Count }}) / 시간({{ Pay.Time }})</h5>\n                    <ul class=\"collapsible\">\n                        <li>\n                            <div class=\"collapsible-header\"><i class=\"material-icons\">clear</i>미결제</div>\n                            <div class=\"collapsible-body\">\n                                <div v-for=\"diary in noneCompletedDiarys\" id=\"noneCompleteDiarys\">\n                                    <DiaryTeacher v-bind:DiaryInfo=\"diary\" v-on:update=\"onChangeDiary\"></DiaryTeacher>\n                                </div>\n                            </div>\n                        </li>\n                        <li>\n                            <div class=\"collapsible-header\"><i class=\"material-icons\">check</i>결제 완료</div>\n                            <div class=\"collapsible-body\">\n                                <div class=\"row\">\n                                    <div class=\"col s6\">\n                                        <Date class=\"input-field col s6\" v-bind:date=\"load.start\" label=\"시작\"\n                                              v-on:input=\"onChangeReloadStart\"></Date>\n                                        <Date class=\"input-field col s6\" v-bind:date=\"load.end\" label=\"끝\"\n                                              v-on:input=\"onChangeReloadEnd\"></Date>\n                                    </div>\n                                    <div class=\"col s6\">\n                                        <div v-for=\"diary in CompletedDiarys\" id=\"diary-list\">\n                                            <DiaryTeacher v-bind:DiaryInfo=\"diary\"></DiaryTeacher>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n\n<script>\n    import StudentService from '../../service/students.js';\n    import TeacherService from '../../service/teachers.js';\n    import DiaryStudent from './DiaryStudent.vue';\n    import DiaryTeacher from './DiaryTeacher.vue';\n    import SelectForm from '../form/SelectForm.vue';\n    import Date from '../form/Date.vue';\n    import Time from '../form/Time.vue';\n    import Utility from '../../Utility/Utility.js';\n\n    export default {\n        name: 'TeacherInformation',\n        mounted() {\n            $('.collapsible').collapsible();\n            this.$store.dispatch('fetchLessons');\n            this.$store.dispatch('fetchStudents');\n            this.fetchTeacher();\n            this.fetchTeacherDiarys();\n        },\n        data() {\n            return {\n                Teacher: {\n                    name: '',\n                    department: '',\n                    phone: '',\n                },\n                ModifyingTeacher: false,\n                CompletedDiarys: [],\n                noneCompletedDiarys: [],\n                Diary: {\n                    lesson_type: null,\n                    lesson_time: {\n                        date: Utility.getDateBaseNow(0, 0, 0),\n                        start: Utility.getTimeBaseNow(-3, 0),\n                        end: Utility.getTimeBaseNow(0, 0),\n                    },\n                },\n                idSelectAll: false,\n                Pay: {\n                    Time: 0,\n                    Count: 0,\n                },\n                SelectedStudent: null,\n                StudentDiarys: new Map(),\n                load: {\n                    start: Utility.getDateBaseNow(0, -1, 0),\n                    end: Utility.getDateBaseNow(0, 0, 0),\n                },\n            };\n        },\n        computed: {\n            getStudents() {\n                const StudentsInfo = this.$store.getters.getStudents;\n                let ret = [];\n                StudentsInfo.forEach(student => {\n                    ret.push({\n                        id: student._id,\n                        name: student.name,\n                    });\n                });\n                return ret;\n            },\n            getLessons() {\n                const LessonsInfo = this.$store.getters.getLessons;\n                let ret = [];\n                LessonsInfo.forEach(lesson => {\n                    ret.push({\n                        id: lesson._id,\n                        name: lesson.type,\n                    });\n                });\n                return ret;\n            },\n        },\n        methods: {\n            AppendStudent() {\n                let Student = null;\n                StudentService.getStudent(this.SelectedStudent)\n                    .then((response) => {\n                        Student = response.data.Student;\n                    })\n                    .catch((error) => {\n                        this.$notify({\n                            title: '데이터를 처리하는 과정에서 오류가 발생했습니다.',\n                            type: 'error',\n                        });\n                    });\n                this.StudentDiarys.set(this.SelectedStudent, {name: Student.name});\n                // this.StudentDiarys.forEach(std => {\n                //     alert(JSON.stringify(std));\n                // });\n            },\n            AllSelect() {\n                //\n            },\n            onChangeLessons(value) {\n                this.Diary.lesson_type = value;\n            },\n            onChangeDiaryDate(value) {\n                this.Diary.lesson_time.date = value;\n            },\n            onChangeDiaryStart(value) {\n                this.Diary.lesson_time.start = value;\n            },\n            onChangeDiaryEnd(value) {\n                this.Diary.lesson_time.end = value;\n            },\n            onChangeStudent(value) {\n                this.SelectedStudent = value;\n            },\n            onChangeReloadStart(value) {\n                this.load.start = value;\n            },\n            onChangeReloadEnd(value) {\n                this.load.end = value;\n            },\n            onChangeDiary(value, type, typeValue) {\n                value.lesson_time.date = Utility.StringToDate(value.lesson_time.date);\n                TeacherService.updateTeacherDiary(value._id, {\n                    lesson_complete: value.lesson_complete,\n                    lesson_time: JSON.stringify(value.lesson_time),\n                })\n                    .then(response => {\n                        this.$notify({\n                            title: response.data.msg,\n                            text: '성공!',\n                            type: 'success',\n                        });\n                        if (type === 'Complete') {\n                            this.CompletedDiarys.push(value);\n                            this.noneCompletedDiarys = Utility.removeElemntByValue(this.noneCompletedDiarys, value);\n                            this.Pay.Count--;\n                            this.Pay.Time -= Utility.duration(value.lesson_time.start, value.lesson_time.end);\n                        } else if (type === 'Edit') {\n                            this.Pay.Time += Utility.duration(typeValue.start, typeValue.end) - Utility.duration(value.lesson_time.start, value.lesson_time.end);\n                        }\n                    })\n                    .catch(error => {\n                        console.log(error);\n                    });\n            },\n            modifyTeacher() {\n                this.ModifyingTeacher = true;\n            },\n            doModifyTeacher() {\n                this.ModifyingTeacher = false;\n            },\n            fetchTeacher() {\n                TeacherService.getTeacher(this.$route.params.TeacherId)\n                    .then((response) => {\n                        this.Teacher = response.data.Teacher;\n                    })\n                    .catch((error) => {\n                        this.$notify({\n                            title: '선생님 정보를 가져오는데 문제가 발생했습니다.',\n                            type: 'error',\n                        });\n                    });\n            },\n            fetchTeacherDiarys() {\n                while (this.CompletedDiarys.length) this.CompletedDiarys.pop();\n                while (this.noneCompletedDiarys.length) this.noneCompletedDiarys.pop();\n                TeacherService.getTeacherDiaryByTeacherId(this.$route.params.TeacherId, {})\n                    .then((response) => {\n                        response.data.Diarys.forEach(diary => {\n                            if (diary.lesson_complete) {\n                                this.CompletedDiarys.push(diary);\n                            } else {\n                                this.noneCompletedDiarys.push(diary);\n                                this.Pay.Time += parseFloat(Utility.duration(diary.lesson_time.start, diary.lesson_time.end));\n                                this.Pay.Count++;\n                            }\n                        })\n                    })\n                    .catch((error) => {\n                        this.$notify({\n                            title: '에러발생',\n                            type: 'error',\n                        })\n                    });\n            },\n            isValidDiaryLesson() {\n                return true;\n            },\n            isValidDiaryTime() {\n                return true;\n            },\n            AddTeacherDiary() {\n                // TODO 선생님 페이지에서 학생 추가 가능하게 할것\n                // if (!this.isValidDiaryLesson()) {\n                //     //\n                // }\n                // if (!this.isValidDiaryTime()) {\n                //     //\n                // }\n                // alert('INIT');\n                TeacherService.addTeacherDiary({\n                    teacher: this.$route.params.TeacherId,\n                    lesson_time: JSON.stringify(this.Diary.lesson_time),\n                    lesson_type: this.Diary.lesson_type,\n                })\n                    .then((response) => {\n                        this.$notify({\n                            title: '일지 작성에 성공했습니다.',\n                            type: 'success',\n                        });\n                        this.Pay.Count++;\n                        this.Pay.Time += parseFloat(Utility.duration(response.data.Diary.lesson_time.start, response.data.Diary.lesson_time.end));\n                        this.noneCompletedDiarys.push(response.data.Diary);\n                    })\n                    .catch((error) => {\n                        this.$notify({\n                            title: '일지 작성에 실패하였습니다.',\n                            type: 'error',\n                        });\n                    });\n            },\n        },\n        components: {\n            DiaryStudent,\n            DiaryTeacher,\n            SelectForm,\n            Date,\n            Time,\n        },\n    };\n</script>"]}]}