{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kali/Documents/web_application/new-unitsoft-intranet-FE/src/components/teachers/TeacherInformation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kali/Documents/web_application/new-unitsoft-intranet-FE/src/components/teachers/TeacherInformation.vue","mtime":1574603655678},{"path":"/home/kali/Documents/web_application/new-unitsoft-intranet-FE/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport StudentService from '../../service/students.js';\nimport TeacherService from '../../service/teachers.js';\nimport DiaryStudent from './DiaryStudent.vue';\nimport DiaryTeacher from './DiaryTeacher.vue';\nimport SelectForm from '../form/SelectForm.vue';\nimport Date from '../form/Date.vue';\nimport Time from '../form/Time.vue';\nimport Utility from '../../Utility/Utility.js';\nimport Diary from \"../students/DiaryStudent\";\n\nexport default {\n\tname: 'TeacherInformation',\n\tmounted() {\n\t\tthis.$store.dispatch('fetchLessons');\n\t\tthis.$store.dispatch('fetchStudents');\n\t\tthis.fetchTeacher();\n\t\tthis.fetchTeacherDiarys();\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tTeacher: {\n\t\t\t\tname: '',\n\t\t\t\tdepartment: '',\n\t\t\t\tphone: '',\n\t\t\t},\n\t\t\tModifyingTeacher: false,\n\t\t\tCompletedDiarys: [],\n\t\t\tnoneCompletedDiarys: [],\n\t\t\tDiary: {\n\t\t\t\tlesson_type: null,\n\t\t\t\tlesson_time: {\n\t\t\t\t\tdate: Utility.getDateBaseNow(0, 0, 0),\n\t\t\t\t\tstart: Utility.getTimeBaseNow(-3, 0),\n\t\t\t\t\tend: Utility.getTimeBaseNow(0, 0),\n\t\t\t\t},\n\t\t\t},\n\t\t\tidSelectAll: false,\n\t\t\tPay: {\n\t\t\t\tTime: 0,\n\t\t\t\tCount: 0,\n\t\t\t},\n\t\t\tSelectedStudent: null,\n\t\t\tStudentDiarys: new Map(),\n\t\t\tload: {\n\t\t\t\tstart: Utility.getDateBaseNow(0, -1, 0),\n\t\t\t\tend: Utility.getDateBaseNow(0, 0, 0),\n\t\t\t},\n\t\t\tnoneCompletedShow: false,\n\t\t\tCompletedShow: false,\n\t\t};\n\t},\n\tcomputed: {\n\t\tgetStudents() {\n\t\t\tconst StudentsInfo = this.$store.getters.getStudents;\n\t\t\tlet ret = [];\n\t\t\tStudentsInfo.forEach(student => {\n\t\t\t\tret.push({\n\t\t\t\t\tid: student._id,\n\t\t\t\t\tname: student.name,\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn ret;\n\t\t},\n\t\tgetLessons() {\n\t\t\tconst LessonsInfo = this.$store.getters.getLessons;\n\t\t\tlet ret = [];\n\t\t\tLessonsInfo.forEach(lesson => {\n\t\t\t\tret.push({\n\t\t\t\t\tid: lesson._id,\n\t\t\t\t\tname: lesson.type,\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn ret;\n\t\t},\n\t},\n\tmethods: {\n\t\tAppendStudent() {\n\t\t\tlet Student = null;\n\t\t\tStudentService.getStudent(this.SelectedStudent)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tStudent = response.data.Student;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\ttitle: '데이터를 처리하는 과정에서 오류가 발생했습니다.',\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tthis.StudentDiarys.set(this.SelectedStudent, {name: Student.name});\n\t\t\t// this.StudentDiarys.forEach(std => {\n\t\t\t//     alert(JSON.stringify(std));\n\t\t\t// });\n\t\t},\n\t\tAllSelect() {\n\t\t\t//\n\t\t},\n\t\tonChangeLessons(value) {\n\t\t\tthis.Diary.lesson_type = value;\n\t\t},\n\t\tonChangeDiaryDate(value) {\n\t\t\tthis.Diary.lesson_time.date = value;\n\t\t},\n\t\tonChangeDiaryStart(value) {\n\t\t\tthis.Diary.lesson_time.start = value;\n\t\t},\n\t\tonChangeDiaryEnd(value) {\n\t\t\tthis.Diary.lesson_time.end = value;\n\t\t},\n\t\tonChangeStudent(value) {\n\t\t\tthis.SelectedStudent = value;\n\t\t},\n\t\tonChangeReloadStart(value) {\n\t\t\tthis.load.start = value;\n\t\t},\n\t\tonChangeReloadEnd(value) {\n\t\t\tthis.load.end = value;\n\t\t},\n\t\tonChangeDiary(value, type, typeValue) {\n\t\t\tvalue.lesson_time.date = Utility.StringToDate(value.lesson_time.date);\n\t\t\tTeacherService.updateTeacherDiary(value._id, {\n\t\t\t\tlesson_complete: value.lesson_complete,\n\t\t\t\tlesson_time: JSON.stringify(value.lesson_time),\n\t\t\t})\n\t\t\t\t.then(response => {\n\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\ttitle: response.data.msg,\n\t\t\t\t\t\ttext: '성공!',\n\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t});\n\t\t\t\t\tif (type === 'Complete') {\n\t\t\t\t\t\tthis.CompletedDiarys.push(value);\n\t\t\t\t\t\tthis.noneCompletedDiarys = Utility.removeElemntByValue(this.noneCompletedDiarys, value);\n\t\t\t\t\t\tthis.Pay.Count--;\n\t\t\t\t\t\tthis.Pay.Time -= Utility.duration(value.lesson_time.start, value.lesson_time.end);\n\t\t\t\t\t} else if (type === 'Edit') {\n\t\t\t\t\t\tthis.Pay.Time += Utility.duration(typeValue.start, typeValue.end) - Utility.duration(value.lesson_time.start, value.lesson_time.end);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\t\t},\n\t\tmodifyTeacher() {\n\t\t\tthis.ModifyingTeacher = true;\n\t\t},\n\t\tdoModifyTeacher() {\n\t\t\tthis.ModifyingTeacher = false;\n\t\t},\n\t\tfetchTeacher() {\n\t\t\tTeacherService.getTeacher(this.$route.params.TeacherId)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.Teacher = response.data.Teacher;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\ttitle: '선생님 정보를 가져오는데 문제가 발생했습니다.',\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t},\n\t\tfetchTeacherDiarys() {\n\t\t\twhile (this.CompletedDiarys.length) this.CompletedDiarys.pop();\n\t\t\twhile (this.noneCompletedDiarys.length) this.noneCompletedDiarys.pop();\n\t\t\tTeacherService.getTeacherDiaryByTeacherId(this.$route.params.TeacherId, {})\n\t\t\t\t.then((response) => {\n\t\t\t\t\tresponse.data.Diarys.forEach(diary => {\n\t\t\t\t\t\tif (diary.lesson_complete) {\n\t\t\t\t\t\t\tthis.CompletedDiarys.push(diary);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.noneCompletedDiarys.push(diary);\n\t\t\t\t\t\t\tthis.Pay.Time += parseFloat(Utility.duration(diary.lesson_time.start, diary.lesson_time.end));\n\t\t\t\t\t\t\tthis.Pay.Count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\ttitle: '에러발생',\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t},\n\t\tisValidDiaryLesson() {\n\t\t\treturn true;\n\t\t},\n\t\tisValidDiaryTime() {\n\t\t\treturn true;\n\t\t},\n\t\tAddTeacherDiary() {\n\t\t\t// TODO 선생님 페이지에서 학생 추가 가능하게 할것\n\t\t\t// if (!this.isValidDiaryLesson()) {\n\t\t\t//     //\n\t\t\t// }\n\t\t\t// if (!this.isValidDiaryTime()) {\n\t\t\t//     //\n\t\t\t// }\n\t\t\t// alert('INIT');\n\t\t\tTeacherService.addTeacherDiary({\n\t\t\t\tteacher: this.$route.params.TeacherId,\n\t\t\t\tlesson_time: JSON.stringify(this.Diary.lesson_time),\n\t\t\t\tlesson_type: this.Diary.lesson_type,\n\t\t\t})\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\ttitle: '일지 작성에 성공했습니다.',\n\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t});\n\t\t\t\t\tthis.Pay.Count++;\n\t\t\t\t\tthis.Pay.Time += parseFloat(Utility.duration(response.data.Diary.lesson_time.start, response.data.Diary.lesson_time.end));\n\t\t\t\t\tthis.noneCompletedDiarys.push(response.data.Diary);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\ttitle: '일지 작성에 실패하였습니다.',\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t},\n\t},\n\tcomponents: {\n\t\tDiary,\n\t\tDiaryStudent,\n\t\tDiaryTeacher,\n\t\tSelectForm,\n\t\tDate,\n\t\tTime,\n\t},\n};\n",{"version":3,"sources":["TeacherInformation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"TeacherInformation.vue","sourceRoot":"src/components/teachers","sourcesContent":["<template>\n    <div class=\"md-layout md-alignment-center\">\n        <div class=\"md-layout-item md-size-70\">\n            <md-card md-with-hover>\n                <md-card-header>\n                    <h4 class=\"md-title\">{{ Teacher.name }}</h4>\n                </md-card-header>\n                <md-card-content>\n                    <div class=\"md-layout md-gutter\">\n                        <div class=\"md-layout-item md-size-50\">\n                            <md-field>\n                                <label>소속</label>\n                                <md-input v-model=\"Teacher.department\" :disabled=\"!ModifyingTeacher\"></md-input>\n                            </md-field>\n                        </div>\n                        <div class=\"md-layout-item md-size-50\">\n                            <md-field>\n                                <label>전화번호</label>\n                                <md-input v-model=\"Teacher.phone\" :disabled=\"!ModifyingTeacher\"></md-input>\n                            </md-field>\n                        </div>\n                    </div>\n                </md-card-content>\n                <md-card-actions>\n                    <md-button v-if=\"!ModifyingTeacher\" @click=\"modifyTeacher\">\n                        <i class=\"icon icon-pencil\"></i>수정하기\n                    </md-button>\n                    <md-button v-else @click=\"doModifyTeacher\">\n                        <i class=\"icon icon-pencil\"></i>완료\n                    </md-button>\n                </md-card-actions>\n            </md-card>\n            <br>\n        </div>\n        <div class=\"md-layout-item md-size-70\">\n            <md-card md-with-hover>\n                <md-card-header>\n                    <h6 class=\"md-title\">일지 추가</h6>\n                </md-card-header>\n                <md-card-content>\n                    <div class=\"md-layout md-gutter\">\n                        <Date class=\"md-layout-item md-size-33\" v-bind:date=\"Diary.lesson_time.date\" label=\"날짜\" v-on:input=\"onChangeDiaryDate\"></Date>\n                        <Time class=\"md-layout-item md-size-33\" v-bind:time=\"Diary.lesson_time.start\" label=\"시작 시간\" v-on:input=\"onChangeDiaryStart\"></Time>\n                        <Time class=\"md-layout-item md-size-33\" v-bind:time=\"Diary.lesson_time.end\" label=\"종료 시간\" v-on:input=\"onChangeDiaryEnd\"></Time>\n                        <SelectForm class=\"md-layout-item md-size-100\" v-bind:selectList=\"getLessons\" v-on:input=\"onChangeLessons\" label=\"수업 종류\"></SelectForm>\n                    </div>\n                </md-card-content>\n                <md-card-actions>\n                    <md-button @click=\"AddTeacherDiary()\" name=\"action\">일지추가</md-button>\n                </md-card-actions>\n            </md-card>\n            <br>\n        </div>\n        <div class=\"md-layout-item md-size-70\">\n            <md-card md-with-hover>\n                <md-card-header>\n                    <h4 class=\"card-title\">일지</h4>\n                </md-card-header>\n                <md-card-content>\n                    <div class=\"md-layout md-alignment-center\">\n                        <div class=\"md-layout md-alignment-center\">\n                            <md-card class=\"md-layout-item md-size-100\">\n                                <md-card-header>\n                                    <md-button v-on:click=\"noneCompletedShow = !noneCompletedShow\">\n                                        <md-icon>clear</md-icon>\n                                        미결제 (횟수({{ Pay.Count }}) / 시간({{ Pay.Time }}))\n                                    </md-button>\n                                </md-card-header>\n                                <md-card-content>\n                                    <transition name=\"fade\">\n                                        <div v-if=\"noneCompletedShow\">\n                                            <DiaryTeacher v-for=\"diary in noneCompletedDiarys\" v-bind:DiaryInfo=\"diary\" v-on:update=\"onChangeDiary\"></DiaryTeacher>\n                                        </div>\n                                    </transition>\n                                </md-card-content>\n                            </md-card>\n                            <md-card class=\"md-layout-item md-size-100\">\n                                <md-card-header>\n                                    <md-button v-on:click=\"CompletedShow = !CompletedShow\">\n                                        <md-icon>check</md-icon>\n                                        결제 완료\n                                    </md-button>\n                                </md-card-header>\n                                <md-card-content>\n                                    <transition name=\"faded\">\n                                        <div v-if=\"CompletedShow\" class=\"md-layout\">\n                                            <Date class=\"md-layout-item md-size-50\" v-bind:date=\"load.start\" label=\"시작\" v-on:input=\"onChangeReloadStart\"></Date>\n                                            <Date class=\"md-layout-item md-size-50\" v-bind:date=\"load.end\" label=\"끝\" v-on:input=\"onChangeReloadEnd\"></Date>\n                                            <DiaryTeacher v-for=\"diary in CompletedDiarys\" v-bind:DiaryInfo=\"diary\"></DiaryTeacher>\n                                        </div>\n                                    </transition>\n                                </md-card-content>\n                            </md-card>\n                        </div>\n                    </div>\n                </md-card-content>\n            </md-card>\n        </div>\n    </div>\n</template>\n\n\n<script>\n\timport StudentService from '../../service/students.js';\n\timport TeacherService from '../../service/teachers.js';\n\timport DiaryStudent from './DiaryStudent.vue';\n\timport DiaryTeacher from './DiaryTeacher.vue';\n\timport SelectForm from '../form/SelectForm.vue';\n\timport Date from '../form/Date.vue';\n\timport Time from '../form/Time.vue';\n\timport Utility from '../../Utility/Utility.js';\n\timport Diary from \"../students/DiaryStudent\";\n\n\texport default {\n\t\tname: 'TeacherInformation',\n\t\tmounted() {\n\t\t\tthis.$store.dispatch('fetchLessons');\n\t\t\tthis.$store.dispatch('fetchStudents');\n\t\t\tthis.fetchTeacher();\n\t\t\tthis.fetchTeacherDiarys();\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tTeacher: {\n\t\t\t\t\tname: '',\n\t\t\t\t\tdepartment: '',\n\t\t\t\t\tphone: '',\n\t\t\t\t},\n\t\t\t\tModifyingTeacher: false,\n\t\t\t\tCompletedDiarys: [],\n\t\t\t\tnoneCompletedDiarys: [],\n\t\t\t\tDiary: {\n\t\t\t\t\tlesson_type: null,\n\t\t\t\t\tlesson_time: {\n\t\t\t\t\t\tdate: Utility.getDateBaseNow(0, 0, 0),\n\t\t\t\t\t\tstart: Utility.getTimeBaseNow(-3, 0),\n\t\t\t\t\t\tend: Utility.getTimeBaseNow(0, 0),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tidSelectAll: false,\n\t\t\t\tPay: {\n\t\t\t\t\tTime: 0,\n\t\t\t\t\tCount: 0,\n\t\t\t\t},\n\t\t\t\tSelectedStudent: null,\n\t\t\t\tStudentDiarys: new Map(),\n\t\t\t\tload: {\n\t\t\t\t\tstart: Utility.getDateBaseNow(0, -1, 0),\n\t\t\t\t\tend: Utility.getDateBaseNow(0, 0, 0),\n\t\t\t\t},\n\t\t\t\tnoneCompletedShow: false,\n\t\t\t\tCompletedShow: false,\n\t\t\t};\n\t\t},\n\t\tcomputed: {\n\t\t\tgetStudents() {\n\t\t\t\tconst StudentsInfo = this.$store.getters.getStudents;\n\t\t\t\tlet ret = [];\n\t\t\t\tStudentsInfo.forEach(student => {\n\t\t\t\t\tret.push({\n\t\t\t\t\t\tid: student._id,\n\t\t\t\t\t\tname: student.name,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\treturn ret;\n\t\t\t},\n\t\t\tgetLessons() {\n\t\t\t\tconst LessonsInfo = this.$store.getters.getLessons;\n\t\t\t\tlet ret = [];\n\t\t\t\tLessonsInfo.forEach(lesson => {\n\t\t\t\t\tret.push({\n\t\t\t\t\t\tid: lesson._id,\n\t\t\t\t\t\tname: lesson.type,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\treturn ret;\n\t\t\t},\n\t\t},\n\t\tmethods: {\n\t\t\tAppendStudent() {\n\t\t\t\tlet Student = null;\n\t\t\t\tStudentService.getStudent(this.SelectedStudent)\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tStudent = response.data.Student;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\t\ttitle: '데이터를 처리하는 과정에서 오류가 발생했습니다.',\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\tthis.StudentDiarys.set(this.SelectedStudent, {name: Student.name});\n\t\t\t\t// this.StudentDiarys.forEach(std => {\n\t\t\t\t//     alert(JSON.stringify(std));\n\t\t\t\t// });\n\t\t\t},\n\t\t\tAllSelect() {\n\t\t\t\t//\n\t\t\t},\n\t\t\tonChangeLessons(value) {\n\t\t\t\tthis.Diary.lesson_type = value;\n\t\t\t},\n\t\t\tonChangeDiaryDate(value) {\n\t\t\t\tthis.Diary.lesson_time.date = value;\n\t\t\t},\n\t\t\tonChangeDiaryStart(value) {\n\t\t\t\tthis.Diary.lesson_time.start = value;\n\t\t\t},\n\t\t\tonChangeDiaryEnd(value) {\n\t\t\t\tthis.Diary.lesson_time.end = value;\n\t\t\t},\n\t\t\tonChangeStudent(value) {\n\t\t\t\tthis.SelectedStudent = value;\n\t\t\t},\n\t\t\tonChangeReloadStart(value) {\n\t\t\t\tthis.load.start = value;\n\t\t\t},\n\t\t\tonChangeReloadEnd(value) {\n\t\t\t\tthis.load.end = value;\n\t\t\t},\n\t\t\tonChangeDiary(value, type, typeValue) {\n\t\t\t\tvalue.lesson_time.date = Utility.StringToDate(value.lesson_time.date);\n\t\t\t\tTeacherService.updateTeacherDiary(value._id, {\n\t\t\t\t\tlesson_complete: value.lesson_complete,\n\t\t\t\t\tlesson_time: JSON.stringify(value.lesson_time),\n\t\t\t\t})\n\t\t\t\t\t.then(response => {\n\t\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\t\ttitle: response.data.msg,\n\t\t\t\t\t\t\ttext: '성공!',\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (type === 'Complete') {\n\t\t\t\t\t\t\tthis.CompletedDiarys.push(value);\n\t\t\t\t\t\t\tthis.noneCompletedDiarys = Utility.removeElemntByValue(this.noneCompletedDiarys, value);\n\t\t\t\t\t\t\tthis.Pay.Count--;\n\t\t\t\t\t\t\tthis.Pay.Time -= Utility.duration(value.lesson_time.start, value.lesson_time.end);\n\t\t\t\t\t\t} else if (type === 'Edit') {\n\t\t\t\t\t\t\tthis.Pay.Time += Utility.duration(typeValue.start, typeValue.end) - Utility.duration(value.lesson_time.start, value.lesson_time.end);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t});\n\t\t\t},\n\t\t\tmodifyTeacher() {\n\t\t\t\tthis.ModifyingTeacher = true;\n\t\t\t},\n\t\t\tdoModifyTeacher() {\n\t\t\t\tthis.ModifyingTeacher = false;\n\t\t\t},\n\t\t\tfetchTeacher() {\n\t\t\t\tTeacherService.getTeacher(this.$route.params.TeacherId)\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tthis.Teacher = response.data.Teacher;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\t\ttitle: '선생님 정보를 가져오는데 문제가 발생했습니다.',\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t},\n\t\t\tfetchTeacherDiarys() {\n\t\t\t\twhile (this.CompletedDiarys.length) this.CompletedDiarys.pop();\n\t\t\t\twhile (this.noneCompletedDiarys.length) this.noneCompletedDiarys.pop();\n\t\t\t\tTeacherService.getTeacherDiaryByTeacherId(this.$route.params.TeacherId, {})\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tresponse.data.Diarys.forEach(diary => {\n\t\t\t\t\t\t\tif (diary.lesson_complete) {\n\t\t\t\t\t\t\t\tthis.CompletedDiarys.push(diary);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.noneCompletedDiarys.push(diary);\n\t\t\t\t\t\t\t\tthis.Pay.Time += parseFloat(Utility.duration(diary.lesson_time.start, diary.lesson_time.end));\n\t\t\t\t\t\t\t\tthis.Pay.Count++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\t\ttitle: '에러발생',\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t},\n\t\t\tisValidDiaryLesson() {\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tisValidDiaryTime() {\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tAddTeacherDiary() {\n\t\t\t\t// TODO 선생님 페이지에서 학생 추가 가능하게 할것\n\t\t\t\t// if (!this.isValidDiaryLesson()) {\n\t\t\t\t//     //\n\t\t\t\t// }\n\t\t\t\t// if (!this.isValidDiaryTime()) {\n\t\t\t\t//     //\n\t\t\t\t// }\n\t\t\t\t// alert('INIT');\n\t\t\t\tTeacherService.addTeacherDiary({\n\t\t\t\t\tteacher: this.$route.params.TeacherId,\n\t\t\t\t\tlesson_time: JSON.stringify(this.Diary.lesson_time),\n\t\t\t\t\tlesson_type: this.Diary.lesson_type,\n\t\t\t\t})\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\t\ttitle: '일지 작성에 성공했습니다.',\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.Pay.Count++;\n\t\t\t\t\t\tthis.Pay.Time += parseFloat(Utility.duration(response.data.Diary.lesson_time.start, response.data.Diary.lesson_time.end));\n\t\t\t\t\t\tthis.noneCompletedDiarys.push(response.data.Diary);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\t\ttitle: '일지 작성에 실패하였습니다.',\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t},\n\t\t},\n\t\tcomponents: {\n\t\t\tDiary,\n\t\t\tDiaryStudent,\n\t\t\tDiaryTeacher,\n\t\t\tSelectForm,\n\t\t\tDate,\n\t\t\tTime,\n\t\t},\n\t};\n</script>\n\n<style lang=\"scss\" scoped>\n    .fade-enter-active, .fade-leave-active {\n        transition: opacity .5s;\n    }\n\n    .fade-enter, .fade-leave-to {\n        opacity: 0;\n    }\n\n    .faded-enter-active, .faded-leave-active {\n        transition: opacity .5s;\n    }\n\n    .faded-enter, .faded-leave-to {\n        opacity: 0;\n    }\n</style>\n"]}]}