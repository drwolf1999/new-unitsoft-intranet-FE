{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kali/Documents/web_application/new-unitsoft-intranet-FE/node_modules/vue-clock-picker/src/components/TimePicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kali/Documents/web_application/new-unitsoft-intranet-FE/node_modules/vue-clock-picker/src/components/TimePicker.vue","mtime":1491370840000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport OutsideClickHandler from './OutsideClickHandler'\nimport TimePickerModal from './TimePickerModal'\nexport default {\n  components: {\n    OutsideClickHandler,\n    TimePickerModal\n  },\n  props: {\n    mode: {\n      type: [String, Number],\n      default: '24',\n      validator: value => value == 24 || value == 12\n    },\n    defaultHour: {\n      type: [String, Number],\n      default: new Date().getHours(),\n      validator: value => value >= 0 && value < 24\n    },\n    defaultMinute: {\n      type: [String, Number],\n      default: new Date().getMinutes(),\n      validator: value => value >= 0 && value < 60\n    },\n    defaultFocused: {\n      type: Boolean,\n      default: false,\n    },\n    onFocusChange: {\n      type: Function,\n      default: () => {}\n    },\n    onHourChange: {\n      type: Function,\n      default: () => {}\n    },\n    onMinuteChange: {\n      type: Function,\n      default: () => {}\n    },\n    onTimeChange: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      hour: this.defaultHour,\n      minute: this.defaultMinute,\n      focused: this.defaultFocused,\n      overElement: false\n    }\n  },\n  computed: {\n    hourString() {\n      return this.hour < 10 ? '0' + this.hour : this.hour + ''\n    },\n    minuteString() {\n      return this.minute < 10 ? '0' + this.minute : this.minute + ''\n    }\n  },\n  methods: {\n    onFocus() {\n      this.focused = true\n      this.onFocusChange && this.onFocusChange(true)\n    },\n    onClearFocus() {\n      !this.overElement && (this.focused = false)\n      !this.overElement && this.onFocusChange && this.onFocusChange(false)\n    },\n    toggleFocus() {\n      this.focused = !this.focused\n      this.onFocusChange && this.onFocusChange(this.focused)\n    },\n    handleHourChange(hour) {\n      this.hour = hour\n      this.onHourChange && this.onHourChange(this.hour)\n      this.handleTimeChange({\n        hour: this.hour\n      })\n    },\n    handleMinuteChange(minute) {\n      this.minute = minute\n      this.onMinuteChange && this.onMinuteChange(this.minute)\n      this.handleTimeChange({\n        minute: this.minute\n      })\n    },\n    handleTimeChange(timeObj) {\n      this.hour = timeObj['hour'] ? timeObj['hour'] : this.hour\n      this.minute = timeObj['minute'] ? timeObj['minute'] : this.minute\n      this.onTimeChange && this.onTimeChange({\n        hour: this.hour,\n        minute: this.minute\n      })\n    }\n  }\n}\n",{"version":3,"sources":["TimePicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TimePicker.vue","sourceRoot":"node_modules/vue-clock-picker/src/components","sourcesContent":["<template>\n\t<div class=\"time-picker-container\">\n\t\t<div class=\"time-picker-preview\" @click=\"toggleFocus\" :class=\"{active:focused}\" @mouseover=\"overElement=true\" @mouseout=\"overElement=false\">\n\t\t\t<div class=\"preview-container\">\n\t\t\t\t{{hourString}}:{{minuteString}}\n\t\t\t</div>\n\t\t</div>\n\t\t<outside-click-handler :on-outside-click=\"onClearFocus\" :focused=\"focused\">\n\t\t\t<time-picker-modal\n\t\t\t\t:init-hour=\"hour\" :init-minute=\"minute\" slot=\"modal\"\n\t\t\t\t:handle-hour-change=\"handleHourChange\" :handle-minute-change=\"handleMinuteChange\"\n\t\t\t\t:handle-time-change=\"handleTimeChange\" v-if=\"focused\"\n\t\t\t/>\n\t\t</outside-click-handler>\n\t</div>\n</template>\n\n<script>\nimport OutsideClickHandler from './OutsideClickHandler'\nimport TimePickerModal from './TimePickerModal'\nexport default {\n  components: {\n    OutsideClickHandler,\n    TimePickerModal\n  },\n  props: {\n    mode: {\n      type: [String, Number],\n      default: '24',\n      validator: value => value == 24 || value == 12\n    },\n    defaultHour: {\n      type: [String, Number],\n      default: new Date().getHours(),\n      validator: value => value >= 0 && value < 24\n    },\n    defaultMinute: {\n      type: [String, Number],\n      default: new Date().getMinutes(),\n      validator: value => value >= 0 && value < 60\n    },\n    defaultFocused: {\n      type: Boolean,\n      default: false,\n    },\n    onFocusChange: {\n      type: Function,\n      default: () => {}\n    },\n    onHourChange: {\n      type: Function,\n      default: () => {}\n    },\n    onMinuteChange: {\n      type: Function,\n      default: () => {}\n    },\n    onTimeChange: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      hour: this.defaultHour,\n      minute: this.defaultMinute,\n      focused: this.defaultFocused,\n      overElement: false\n    }\n  },\n  computed: {\n    hourString() {\n      return this.hour < 10 ? '0' + this.hour : this.hour + ''\n    },\n    minuteString() {\n      return this.minute < 10 ? '0' + this.minute : this.minute + ''\n    }\n  },\n  methods: {\n    onFocus() {\n      this.focused = true\n      this.onFocusChange && this.onFocusChange(true)\n    },\n    onClearFocus() {\n      !this.overElement && (this.focused = false)\n      !this.overElement && this.onFocusChange && this.onFocusChange(false)\n    },\n    toggleFocus() {\n      this.focused = !this.focused\n      this.onFocusChange && this.onFocusChange(this.focused)\n    },\n    handleHourChange(hour) {\n      this.hour = hour\n      this.onHourChange && this.onHourChange(this.hour)\n      this.handleTimeChange({\n        hour: this.hour\n      })\n    },\n    handleMinuteChange(minute) {\n      this.minute = minute\n      this.onMinuteChange && this.onMinuteChange(this.minute)\n      this.handleTimeChange({\n        minute: this.minute\n      })\n    },\n    handleTimeChange(timeObj) {\n      this.hour = timeObj['hour'] ? timeObj['hour'] : this.hour\n      this.minute = timeObj['minute'] ? timeObj['minute'] : this.minute\n      this.onTimeChange && this.onTimeChange({\n        hour: this.hour,\n        minute: this.minute\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"css\">\n.time-picker-container {\n  position: relative;\n}\n\n.time-picker-preview {\n\tposition: relative;\n  \tcursor: pointer;\n  \theight: 50px;\n\twidth: 300px;\n  \tcolor: #343434;\n  \tborder-radius: 2px;\n  \tbackground-color: #fff;\n  \ttransition: all 400ms cubic-bezier(0.165, 0.84, 0.44, 1);\n\tbox-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.12), 0 0 4px 0 rgba(0, 0, 0, 0.08);\n}\n\n.time-picker-preview.active,\n.time-picker-preview:hover {\n  box-shadow: 0 8px 8px 0 rgba(0, 0, 0, 0.12), 0 0 8px 0 rgba(0, 0, 0, 0.08);\n}\n\n.time-picker-preview.active {\n  color: #fff;\n  background-color: #3498db;\n}\n\n.preview-container {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  height: 40px;\n  line-height: 40px;\n  /*padding-left: 30px;*/\n  transform: translate(-50%, -50%);\n  font-size: 2rem;\n}\n</style>\n"]}]}