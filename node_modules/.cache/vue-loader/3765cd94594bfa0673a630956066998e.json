{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kali/Documents/web_application/new-unitsoft-intranet-FE/src/components/auth/Auth.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kali/Documents/web_application/new-unitsoft-intranet-FE/src/components/auth/Auth.vue","mtime":1573439118218},{"path":"/home/kali/Documents/web_application/new-unitsoft-intranet-FE/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\timport { validationMixin } from 'vuelidate';\n\timport {\n\t\trequired,\n\t\temail,\n\t\tminLength,\n\t\tmaxLength\n\t} from 'vuelidate/lib/validators';\n\n\texport default {\n\t\tname: 'FormValidation',\n\t\tmixins: [validationMixin],\n\t\tdata: () => ({\n\t\t\tLogin: {\n                username: null,\n                password: null,\n\t\t\t},\n            Register: {\n\t\t\t\tusername: null,\n                password: null,\n            },\n\t\t\tuserSaved: false,\n\t\t\tsending: false,\n            LoginMode: true,\n\t\t}),\n\t\tvalidations: {\n\t\t\tLogin: {\n                username: {\n\t\t\t\t\trequired,\n                },\n                password: {\n\t\t\t\t\trequired,\n                }\n\t\t\t},\n\t\t\tRegister: {\n\t\t\t\tusername: {\n\t\t\t\t\trequired,\n\t\t\t\t},\n\t\t\t\tpassword: {\n\t\t\t\t\trequired,\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tMode() {\n\t\t\t\tthis.LoginMode = !this.LoginMode;\n\t\t\t\tthis.$v.$reset();\n            },\n\t\t\tgetValidationClass (fieldName) {\n\t\t\t\tconst field = this.LoginMode ? this.$v.Login[fieldName] : this.$v.Register[fieldName];\n\n\t\t\t\tif (field) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'md-invalid': field.$invalid && field.$dirty,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tclearForm () {\n\t\t\t\tthis.$v.$reset();\n\t\t\t\tif(this.LoginMode) {\n\t\t\t\t\tthis.Login.username = null;\n\t\t\t\t\tthis.Login.password = null;\n                } else {\n\t\t\t\t\tthis.Register.username = null;\n\t\t\t\t\tthis.Register.password = null;\n                }\n\t\t\t},\n\t\t\tsaveUser () {\n\t\t\t\tthis.sending = true;\n\n\t\t\t\t// Instead of this timeout, here you can call your API\n\t\t\t\t// window.setTimeout(() => {\n\t\t\t\t// \tthis.userSaved = true;\n\t\t\t\t// \tthis.sending = false;\n\t\t\t\t// \tthis.clearForm();\n\t\t\t\t// }, 15000000);\n\t\t\t},\n\t\t\tvalidateUser () {\n\t\t\t\tthis.$v.$touch();\n\n\t\t\t\tif (!this.$v.$invalid) {\n\t\t\t\t\tthis.saveUser();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n",{"version":3,"sources":["Auth.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Auth.vue","sourceRoot":"src/components/auth","sourcesContent":["<template>\n    <div v-if=\"LoginMode\">\n        <form novalidate class=\"md-layout\" @submit.prevent=\"validateUser\">\n            <md-card class=\"md-layout-item md-size-50 md-small-size-100\">\n                <md-card-header>\n                    <div class=\"md-title\">Login</div>\n                </md-card-header>\n\n                <md-card-content>\n                    <md-field :class=\"getValidationClass('username')\">\n                        <label for=\"login-username\">username</label>\n                        <md-input type=\"text\" name=\"login-username\" id=\"login-username\" v-model=\"Login.username\" :disabled=\"sending\" />\n                        <span class=\"md-error\" v-if=\"!$v.Login.username.required\">The username is required</span>\n                    </md-field>\n                    <md-field :class=\"getValidationClass('password')\">\n                        <label for=\"login-password\">password</label>\n                        <md-input type=\"password\" name=\"login-password\" id=\"login-password\" v-model=\"Login.password\" :disabled=\"sending\" />\n                        <span class=\"md-error\" v-if=\"!$v.Login.password.required\">The password is required</span>\n                    </md-field>\n                </md-card-content>\n\n                <md-progress-bar md-mode=\"indeterminate\" v-if=\"sending\" />\n\n                <md-card-actions>\n                    <md-button type=\"submit\" class=\"md-primary\" :disabled=\"sending\">Login</md-button>\n                    <md-button type=\"button\" class=\"md-primary\" @click=\"Mode\">RegisterMode</md-button>\n                </md-card-actions>\n            </md-card>\n        </form>\n    </div>\n    <div v-else>\n        <form novalidate class=\"md-layout\" @submit.prevent=\"validateUser\">\n            <md-card class=\"md-layout-item md-size-50 md-small-size-100\">\n                <md-card-header>\n                    <div class=\"md-title\">Register</div>\n                </md-card-header>\n\n                <md-card-content>\n                    <md-field :class=\"getValidationClass('username')\">\n                        <label for=\"register-username\">username</label>\n                        <md-input type=\"text\" name=\"register-username\" id=\"register-username\" v-model=\"Register.username\" :disabled=\"sending\" />\n                        <span class=\"md-error\" v-if=\"!$v.Register.username.required\">The username is required</span>\n                    </md-field>\n                    <md-field :class=\"getValidationClass('password')\">\n                        <label for=\"register-password\">password</label>\n                        <md-input type=\"password\" name=\"register-password\" id=\"register-password\" v-model=\"Register.password\" :disabled=\"sending\" />\n                        <span class=\"md-error\" v-if=\"!$v.Register.password.required\">The password is required</span>\n                    </md-field>\n                </md-card-content>\n\n                <md-progress-bar md-mode=\"indeterminate\" v-if=\"sending\" />\n\n                <md-card-actions>\n                    <md-button type=\"submit\" class=\"md-primary\" :disabled=\"sending\">Register</md-button>\n                    <md-button type=\"button\" class=\"md-primary\" @click=\"Mode\">LoginMode</md-button>\n                </md-card-actions>\n            </md-card>\n        </form>\n    </div>\n</template>\n\n<script>\n\timport { validationMixin } from 'vuelidate';\n\timport {\n\t\trequired,\n\t\temail,\n\t\tminLength,\n\t\tmaxLength\n\t} from 'vuelidate/lib/validators';\n\n\texport default {\n\t\tname: 'FormValidation',\n\t\tmixins: [validationMixin],\n\t\tdata: () => ({\n\t\t\tLogin: {\n                username: null,\n                password: null,\n\t\t\t},\n            Register: {\n\t\t\t\tusername: null,\n                password: null,\n            },\n\t\t\tuserSaved: false,\n\t\t\tsending: false,\n            LoginMode: true,\n\t\t}),\n\t\tvalidations: {\n\t\t\tLogin: {\n                username: {\n\t\t\t\t\trequired,\n                },\n                password: {\n\t\t\t\t\trequired,\n                }\n\t\t\t},\n\t\t\tRegister: {\n\t\t\t\tusername: {\n\t\t\t\t\trequired,\n\t\t\t\t},\n\t\t\t\tpassword: {\n\t\t\t\t\trequired,\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tMode() {\n\t\t\t\tthis.LoginMode = !this.LoginMode;\n\t\t\t\tthis.$v.$reset();\n            },\n\t\t\tgetValidationClass (fieldName) {\n\t\t\t\tconst field = this.LoginMode ? this.$v.Login[fieldName] : this.$v.Register[fieldName];\n\n\t\t\t\tif (field) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'md-invalid': field.$invalid && field.$dirty,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tclearForm () {\n\t\t\t\tthis.$v.$reset();\n\t\t\t\tif(this.LoginMode) {\n\t\t\t\t\tthis.Login.username = null;\n\t\t\t\t\tthis.Login.password = null;\n                } else {\n\t\t\t\t\tthis.Register.username = null;\n\t\t\t\t\tthis.Register.password = null;\n                }\n\t\t\t},\n\t\t\tsaveUser () {\n\t\t\t\tthis.sending = true;\n\n\t\t\t\t// Instead of this timeout, here you can call your API\n\t\t\t\t// window.setTimeout(() => {\n\t\t\t\t// \tthis.userSaved = true;\n\t\t\t\t// \tthis.sending = false;\n\t\t\t\t// \tthis.clearForm();\n\t\t\t\t// }, 15000000);\n\t\t\t},\n\t\t\tvalidateUser () {\n\t\t\t\tthis.$v.$touch();\n\n\t\t\t\tif (!this.$v.$invalid) {\n\t\t\t\t\tthis.saveUser();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n</script>\n\n<style lang=\"scss\" scoped>\n    .md-progress-bar {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n    }\n</style>\n"]}]}