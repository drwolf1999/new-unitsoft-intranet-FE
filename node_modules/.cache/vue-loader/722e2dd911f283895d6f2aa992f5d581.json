{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kali/Documents/web_application/FE/src/components/students/StudentInformation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kali/Documents/web_application/FE/src/components/students/StudentInformation.vue","mtime":1559533346791},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport StudentService from '../../service/students.js';\nimport SelectForm from '../form/SelectForm.vue';\nimport Diary from './DiaryStudent.vue';\nimport Utility from '../../Utility/Utility.js';\n\nexport default {\n    name: 'StudentsDiary',\n    mounted() {\n        this.setDiaryTime();\n        this.$store.dispatch('fetchTeachers');\n        this.$store.dispatch('fetchLessons');\n        this.fetchStudent();\n        this.fetchStudentDiarys();\n    },\n    data() {\n        return {\n            Student: {\n                _id: '',\n                school: '',\n                grade: '',\n                phone: '',\n                parent_phone: '',\n                unitstudy_id: '',\n            },\n            ModifyingStudent: false,\n            CompletedDiarys: [],\n            noneCompletedDiarys: [],\n            DATE: null,\n            Diary: {\n                teacher: null,\n                lesson_type: null,\n                lesson_time: {\n                    date: null,\n                    start: null,\n                    end: null,\n                },\n                lesson_about: '',\n                // 학생 시간 관리\n                time: 0,\n                lesson_complete: false,\n            },\n            isSelectAll: false,\n            Pay: {\n                Time: 0,\n                Count: 0,\n            },\n            load: {\n                start: null,\n                end: null,\n            }\n        };\n    },\n    computed: {\n        getTeachers() {\n            const TeachersInfo = this.$store.getters.getTeachers;\n            let ret = [];\n            TeachersInfo.forEach(teacher => {\n                ret.push({\n                    id: teacher._id,\n                    name: teacher.name,\n                });\n            });\n            return ret;\n        },\n        getLessons() {\n            const LessonsInfo = this.$store.getters.getLessons;\n            let ret = [];\n            LessonsInfo.forEach(lesson => {\n                ret.push({\n                    id: lesson._id,\n                    name: lesson.type,\n                });\n            });\n            return ret;\n        },\n    },\n    methods: {\n        setDiaryTime() {\n            let {year, month, day, hours, minutes} = Utility.getNowDateTime();\n            let {hour, minute} = Utility.RoundTime(hours, minutes);\n            let start = hour - 3, end = hour;\n            month = Utility.DateTimeTo2Digit(month);\n            day = Utility.DateTimeTo2Digit(day);\n            start = Utility.DateTimeTo2Digit(start);\n            end = Utility.DateTimeTo2Digit(end);\n            minute = Utility.DateTimeTo2Digit(minute);\n            this.Diary.lesson_time.date = year + '-' + month + '-' + day;\n            this.Diary.lesson_time.start = start + ':' + minute;\n            this.Diary.lesson_time.end = end + ':' + minute;\n            this.load.end = year + '-' + month + '-' + day;\n            this.load.start = year + '-' + (month - 1) + '-' + day;\n        },\n        AllSelect() {\n            this.isSelectAll = !this.isSelectAll;\n        },\n        modifyStudent() {\n            this.ModifyingStudent = true;\n        },\n        doModifyStudent() {\n            this.ModifyingStudent = false;\n        },\n        onChangeTeachers(value) {\n            this.Diary.teacher = value;\n        },\n        onChangeLessons(value) {\n            this.Diary.lesson_type = value;\n        },\n        onChangeDiary(value, type, typeValue) {\n            value.lesson_time.date = Utility.StringToDate(value.lesson_time.date);\n            StudentService.updateStudentDiary(value._id, {\n                lesson_complete: value.lesson_complete,\n                lesson_time: JSON.stringify(value.lesson_time),\n                lesson_about: value.lesson_about,\n            })\n                .then(response => {\n                    this.$notify({\n                        title: response.data.msg,\n                        text: '성공!',\n                        type: 'success',\n                    });\n                    if (type === 'Complete') {\n                        this.CompletedDiarys.push(value);\n                        this.noneCompletedDiarys = Utility.removeElemntByValue(this.noneCompletedDiarys, value);\n                        this.Pay.Count--;\n                        this.Pay.Time -= Utility.duration(value.lesson_time.start, value.lesson_time.end);\n                    } else if (type === 'Edit') {\n                        this.Pay.Time += Utility.duration(typeValue.start, typeValue.end) - Utility.duration(value.lesson_time.start, value.lesson_time.end);\n                    }\n                })\n                .catch(error => {\n                    console.log(error);\n                });\n        },\n        fetchStudent() {\n            StudentService.getStudent(this.$route.params.StudentId)\n                .then((response) => {\n                    this.Student = response.data.student;\n                })\n                .catch(error => {\n                    console.log(error);\n                });\n        },\n        fetchStudentDiarys() {\n            alert('!!');\n            StudentService.getStudentDiaryByStudentId(this.$route.params.StudentId, {\n                start: this.load.start,\n                end: this.load.end,\n            })\n                .then((response) => {\n                    response.data.Diarys.forEach(diary => {\n                        if (diary.lesson_complete) {\n                            this.CompletedDiarys.push(diary);\n                        } else {\n                            this.noneCompletedDiarys.push(diary);\n                            this.Time += Utility.duration(diary.lesson_time.start, diary.lesson_time.end);\n                            this.Count++;\n                        }\n                    });\n                });\n        },\n        AddStudentDiary() {\n            this.Diary.time = Utility.duration(this.Diary.lesson_time.start, this.Diary.lesson_time.end);\n            StudentService.addStudentDiary({\n                student_id: this.Student._id,\n                teacher: this.Diary.teacher,\n                lesson_type: this.Diary.lesson_type,\n                lesson_time: JSON.stringify(this.Diary.lesson_time),\n                lesson_about: this.Diary.lesson_about,\n            })\n                .then((response) => {\n                    this.$notify({\n                        title: response.data.msg,\n                        text: '성공!',\n                        type: 'success',\n                    });\n                    this.noneCompletedDiarys.push(response.data.Diary);\n                })\n                .catch((error) => {\n                    this.$notify({\n                        title: '실패..',\n                        text: '실패..',\n                        type: 'error',\n                    });\n                    console.log(error);\n                });\n        },\n    },\n    components: {\n        SelectForm,\n        Diary,\n    },\n};\n",{"version":3,"sources":["StudentInformation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"StudentInformation.vue","sourceRoot":"src/components/students","sourcesContent":["<template>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-10\">\n                <br/>\n                <h4>{{ Student.name }}</h4>\n                <br/>\n                <div class=\"row\">\n                    <div class=\"input-field col s5\">\n                        <input type=\"text\" name=\"school\" v-model=\"Student.school\" id=\"school\"\n                               :disabled=\"!ModifyingStudent\">\n                        <label for=\"school\" class=\"active\">학교</label>\n                    </div>\n                    <div class=\"input-field col s5\">\n                        <input type=\"text\" name=\"grade\" v-model=\"Student.grade\" id=\"grade\"\n                               :disabled=\"!ModifyingStudent\">\n                        <label for=\"grade\" class=\"active\">학년</label>\n                    </div>\n                    <div class=\"input-field col s5\">\n                        <input type=\"text\" name=\"phone\" v-model=\"Student.phone\" id=\"phone\"\n                               :disabled=\"!ModifyingStudent\">\n                        <label for=\"phone\" class=\"active\">학생 전화번호</label>\n                    </div>\n                    <div class=\"input-field col s5\">\n                        <input type=\"text\" name=\"parent-phone\" v-model=\"Student.parent_phone\" id=\"parent-phone\"\n                               :disabled=\"!ModifyingStudent\">\n                        <label for=\"parent-phone\" class=\"active\">부모님 전화번호</label>\n                    </div>\n                    <div class=\"input-field col s5\">\n                        <input type=\"text\" name=\"unitstudy-id\" v-model=\"Student.unitstudy_id\" id=\"unitstudy-id\"\n                               :disabled=\"!ModifyingStudent\">\n                        <label for=\"unitstudy-id\" class=\"active\">유닛스터디 ID</label>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <button v-if=\"!ModifyingStudent\" class=\"btn\" @click=\"modifyStudent()\" id=\"change-btn\"><i\n                            class=\"icon icon-pencil\"></i> 수정하기\n                    </button>\n                    <button v-else class=\"btn\" @click=\"doModifyStudent()\" id=\"do-chang-btn\"><i\n                            class=\"icon icon-pencil\"></i>완료\n                    </button>\n                </div>\n            </div>\n        </div>\n        <h4>일지 추가</h4>\n        <div class=\"form-control\">\n            <div class=\"row\">\n                <div class=\"input-field col s4\">\n                    <v-TimeDate format=\"YYYY-MM-DD\" formatted=\"ll\" label=\"수업 시간\" only-date\n                                v-model=\"Diary.lesson_time.date\"></v-TimeDate>\n                </div>\n                <div class=\"input-field col s4\">\n                    <v-TimeDate format=\"hh:mm\" formatted=\"hh:mm a\" label=\"시작 시간\" only-time\n                                v-model=\"Diary.lesson_time.start\"></v-TimeDate>\n                </div>\n                <div class=\"input-field col s4\">\n                    <v-TimeDate format=\"hh:mm\" formatted=\"hh:mm a\" label=\"종료 시간\" only-time\n                                v-model=\"Diary.lesson_time.end\"></v-TimeDate>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"input-field col s6\">\n                    <SelectForm v-bind:selectList=\"getTeachers\" v-on:input=\"onChangeTeachers\"\n                                name=\"담당 선생님\"></SelectForm>\n                </div>\n                <div class=\"input-field col s6\">\n                    <SelectForm v-bind:selectList=\"getLessons\" v-on:input=\"onChangeLessons\" name=\"수업 종류\"></SelectForm>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"input-field col s12\">\n                    <label class=\"active\">상세 내용</label>\n                    <input type=\"text\" id=\"lesson-about\" v-model=\"Diary.lesson_about\">\n                </div>\n                <button class=\"btn waves-effect waves-light\" id=\"add-studentdiary-btn\" @click=\"AddStudentDiary()\"\n                        name=\"action\">일지추가\n                    <i class=\"material-icons right\">send</i>\n                </button>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <h4>일지</h4>\n            <table>\n                <tr>\n                    <th style=\"width: 30%\">횟수 / 시간</th>\n                    <td style=\"width: 70%\">\n                        <div class=\"input-field inline s2\">\n                            <input disabled type=\"text\" v-model=\"Pay.Count\" id=\"total-count\">\n                        </div>\n                        <div class=\"input-field inline s2\">\n                            <input disabled type=\"text\" v-model=\"Pay.Time\" id=\"total-time\">\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <th>미결제 일지 <br><br><label><input type=\"checkbox\" id=\"diary-check-all\"\n                                                     @click=\"AllSelect\"><span>전체 선택</span></label>\n                    </th>\n                    <td>\n                        <div id=\"uncomplete-diary-list\">\n                            <div>\n                                <div v-for=\"diary in noneCompletedDiarys\">\n                                    <Diary v-bind:DiaryInfo=\"diary\" v-on:update=\"onChangeDiary\"></Diary>\n                                </div>\n                            </div>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <th>\n                        {{ load }}\n                        일지\n                        <br>\n                        <div class=\"input-field col s6\">\n                            <v-TimeDate format=\"YYYY-MM-DD\" formatted=\"ll\" only-date v-model=\"load.start\" @change=\"fetchStudentDiarys\" label=\"시작\"></v-TimeDate>\n                        </div>\n                        <div class=\"input-field col s6 m6\">\n                            <v-TimeDate format=\"YYYY-MM-DD\" formatted=\"ll\" only-date v-model=\"load.end\" @change=\"fetchStudentDiarys\" label=\"끝\"></v-TimeDate>\n                        </div>\n                    </th>\n                    <td>\n                        <div id=\"diary-list\">\n                            <div v-for=\"diary in CompletedDiarys\">\n                                <Diary v-bind:DiaryInfo=\"diary\"></Diary>\n                            </div>\n                        </div>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</template>\n\n<script>\n    import StudentService from '../../service/students.js';\n    import SelectForm from '../form/SelectForm.vue';\n    import Diary from './DiaryStudent.vue';\n    import Utility from '../../Utility/Utility.js';\n\n    export default {\n        name: 'StudentsDiary',\n        mounted() {\n            this.setDiaryTime();\n            this.$store.dispatch('fetchTeachers');\n            this.$store.dispatch('fetchLessons');\n            this.fetchStudent();\n            this.fetchStudentDiarys();\n        },\n        data() {\n            return {\n                Student: {\n                    _id: '',\n                    school: '',\n                    grade: '',\n                    phone: '',\n                    parent_phone: '',\n                    unitstudy_id: '',\n                },\n                ModifyingStudent: false,\n                CompletedDiarys: [],\n                noneCompletedDiarys: [],\n                DATE: null,\n                Diary: {\n                    teacher: null,\n                    lesson_type: null,\n                    lesson_time: {\n                        date: null,\n                        start: null,\n                        end: null,\n                    },\n                    lesson_about: '',\n                    // 학생 시간 관리\n                    time: 0,\n                    lesson_complete: false,\n                },\n                isSelectAll: false,\n                Pay: {\n                    Time: 0,\n                    Count: 0,\n                },\n                load: {\n                    start: null,\n                    end: null,\n                }\n            };\n        },\n        computed: {\n            getTeachers() {\n                const TeachersInfo = this.$store.getters.getTeachers;\n                let ret = [];\n                TeachersInfo.forEach(teacher => {\n                    ret.push({\n                        id: teacher._id,\n                        name: teacher.name,\n                    });\n                });\n                return ret;\n            },\n            getLessons() {\n                const LessonsInfo = this.$store.getters.getLessons;\n                let ret = [];\n                LessonsInfo.forEach(lesson => {\n                    ret.push({\n                        id: lesson._id,\n                        name: lesson.type,\n                    });\n                });\n                return ret;\n            },\n        },\n        methods: {\n            setDiaryTime() {\n                let {year, month, day, hours, minutes} = Utility.getNowDateTime();\n                let {hour, minute} = Utility.RoundTime(hours, minutes);\n                let start = hour - 3, end = hour;\n                month = Utility.DateTimeTo2Digit(month);\n                day = Utility.DateTimeTo2Digit(day);\n                start = Utility.DateTimeTo2Digit(start);\n                end = Utility.DateTimeTo2Digit(end);\n                minute = Utility.DateTimeTo2Digit(minute);\n                this.Diary.lesson_time.date = year + '-' + month + '-' + day;\n                this.Diary.lesson_time.start = start + ':' + minute;\n                this.Diary.lesson_time.end = end + ':' + minute;\n                this.load.end = year + '-' + month + '-' + day;\n                this.load.start = year + '-' + (month - 1) + '-' + day;\n            },\n            AllSelect() {\n                this.isSelectAll = !this.isSelectAll;\n            },\n            modifyStudent() {\n                this.ModifyingStudent = true;\n            },\n            doModifyStudent() {\n                this.ModifyingStudent = false;\n            },\n            onChangeTeachers(value) {\n                this.Diary.teacher = value;\n            },\n            onChangeLessons(value) {\n                this.Diary.lesson_type = value;\n            },\n            onChangeDiary(value, type, typeValue) {\n                value.lesson_time.date = Utility.StringToDate(value.lesson_time.date);\n                StudentService.updateStudentDiary(value._id, {\n                    lesson_complete: value.lesson_complete,\n                    lesson_time: JSON.stringify(value.lesson_time),\n                    lesson_about: value.lesson_about,\n                })\n                    .then(response => {\n                        this.$notify({\n                            title: response.data.msg,\n                            text: '성공!',\n                            type: 'success',\n                        });\n                        if (type === 'Complete') {\n                            this.CompletedDiarys.push(value);\n                            this.noneCompletedDiarys = Utility.removeElemntByValue(this.noneCompletedDiarys, value);\n                            this.Pay.Count--;\n                            this.Pay.Time -= Utility.duration(value.lesson_time.start, value.lesson_time.end);\n                        } else if (type === 'Edit') {\n                            this.Pay.Time += Utility.duration(typeValue.start, typeValue.end) - Utility.duration(value.lesson_time.start, value.lesson_time.end);\n                        }\n                    })\n                    .catch(error => {\n                        console.log(error);\n                    });\n            },\n            fetchStudent() {\n                StudentService.getStudent(this.$route.params.StudentId)\n                    .then((response) => {\n                        this.Student = response.data.student;\n                    })\n                    .catch(error => {\n                        console.log(error);\n                    });\n            },\n            fetchStudentDiarys() {\n                alert('!!');\n                StudentService.getStudentDiaryByStudentId(this.$route.params.StudentId, {\n                    start: this.load.start,\n                    end: this.load.end,\n                })\n                    .then((response) => {\n                        response.data.Diarys.forEach(diary => {\n                            if (diary.lesson_complete) {\n                                this.CompletedDiarys.push(diary);\n                            } else {\n                                this.noneCompletedDiarys.push(diary);\n                                this.Time += Utility.duration(diary.lesson_time.start, diary.lesson_time.end);\n                                this.Count++;\n                            }\n                        });\n                    });\n            },\n            AddStudentDiary() {\n                this.Diary.time = Utility.duration(this.Diary.lesson_time.start, this.Diary.lesson_time.end);\n                StudentService.addStudentDiary({\n                    student_id: this.Student._id,\n                    teacher: this.Diary.teacher,\n                    lesson_type: this.Diary.lesson_type,\n                    lesson_time: JSON.stringify(this.Diary.lesson_time),\n                    lesson_about: this.Diary.lesson_about,\n                })\n                    .then((response) => {\n                        this.$notify({\n                            title: response.data.msg,\n                            text: '성공!',\n                            type: 'success',\n                        });\n                        this.noneCompletedDiarys.push(response.data.Diary);\n                    })\n                    .catch((error) => {\n                        this.$notify({\n                            title: '실패..',\n                            text: '실패..',\n                            type: 'error',\n                        });\n                        console.log(error);\n                    });\n            },\n        },\n        components: {\n            SelectForm,\n            Diary,\n        },\n    };\n</script>"]}]}