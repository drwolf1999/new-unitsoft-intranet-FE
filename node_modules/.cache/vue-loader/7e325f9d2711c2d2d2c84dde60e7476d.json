{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kali/Documents/web_application/new-unitsoft-intranet-FE/src/components/auth/Auth.vue?vue&type=style&index=0&id=609b5322&lang=scss&scoped=true&","dependencies":[{"path":"/home/kali/Documents/web_application/new-unitsoft-intranet-FE/src/components/auth/Auth.vue","mtime":1573660766712},{"path":"/home/kali/Documents/web_application/new-unitsoft-intranet-FE/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/kali/Documents/web_application/new-unitsoft-intranet-FE/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.md-progress-bar {\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 0;\n}\n",{"version":3,"sources":["Auth.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsNA;AACA;AACA;AACA;AACA;AACA","file":"Auth.vue","sourceRoot":"src/components/auth","sourcesContent":["<template>\n    <div v-if=\"LoginMode\">\n        <form novalidate class=\"md-layout\" @submit.prevent=\"validateUser('Login')\">\n            <md-card class=\"md-layout-item md-size-50 md-small-size-100\">\n                <md-progress-bar md-mode=\"indeterminate\" v-if=\"sending\"/>\n                <md-card-header>\n                    <div class=\"md-title\">Login</div>\n                </md-card-header>\n\n                <md-card-content>\n                    <md-field :class=\"getValidationClass('username')\">\n                        <label for=\"login-username\">username</label>\n                        <md-input type=\"text\" name=\"login-username\" id=\"login-username\" v-model=\"Login.username\" :disabled=\"sending\"/>\n                        <span class=\"md-error\" v-if=\"!$v.Login.username.required\">The username is required</span>\n                        <span class=\"md-error\" v-if=\"!$v.Login.username.minLength\">The username is very short!</span>\n                        <span class=\"md-error\" v-if=\"!$v.Login.username.maxLength\">The username is very long! </span>\n                    </md-field>\n                    <md-field :class=\"getValidationClass('password')\">\n                        <label for=\"login-password\">password</label>\n                        <md-input type=\"password\" name=\"login-password\" id=\"login-password\" v-model=\"Login.password\" :disabled=\"sending\"/>\n                        <span class=\"md-error\" v-if=\"!$v.Login.password.required\">The password is required</span>\n                        <span class=\"md-error\" v-if=\"!$v.Login.password.minLength\">The password is very short!</span>\n                        <span class=\"md-error\" v-if=\"!$v.Login.password.maxLength\">The password is very long! </span>\n                    </md-field>\n                </md-card-content>\n\n                <md-card-actions>\n                    <md-button type=\"submit\" class=\"md-primary\" :disabled=\"sending\">Login</md-button>\n                    <md-button type=\"button\" class=\"md-primary\" @click=\"Mode\">RegisterMode</md-button>\n                </md-card-actions>\n            </md-card>\n        </form>\n    </div>\n    <div v-else>\n        <form novalidate class=\"md-layout\" @submit.prevent=\"validateUser('Register')\">\n            <md-card class=\"md-layout-item md-size-50 md-small-size-100\">\n                <md-card-header>\n                    <div class=\"md-title\">Register</div>\n                </md-card-header>\n\n                <md-card-content>\n                    <md-field :class=\"getValidationClass('username')\">\n                        <label for=\"register-username\">username</label>\n                        <md-input type=\"text\" name=\"register-username\" id=\"register-username\" v-model=\"Register.username\" :disabled=\"sending\"/>\n                        <span class=\"md-error\" v-if=\"!$v.Register.username.required\">The username is required</span>\n                    </md-field>\n                    <md-field :class=\"getValidationClass('password')\">\n                        <label for=\"register-password\">password</label>\n                        <md-input type=\"password\" name=\"register-password\" id=\"register-password\" v-model=\"Register.password\" :disabled=\"sending\"/>\n                        <span class=\"md-error\" v-if=\"!$v.Register.password.required\">The password is required</span>\n                    </md-field>\n                </md-card-content>\n\n                <md-progress-bar md-mode=\"indeterminate\" v-if=\"sending\"/>\n\n                <md-card-actions>\n                    <md-button type=\"submit\" class=\"md-primary\" :disabled=\"sending\">Register</md-button>\n                    <md-button type=\"button\" class=\"md-primary\" @click=\"Mode\">LoginMode</md-button>\n                </md-card-actions>\n            </md-card>\n        </form>\n    </div>\n</template>\n\n<script>\n\timport {validationMixin} from 'vuelidate';\n\timport {\n\t\trequired,\n\t\temail,\n\t\tminLength,\n\t\tmaxLength\n\t} from 'vuelidate/lib/validators';\n\timport Auth from '../../service/auth.js';\n\n\texport default {\n\t\tname: 'FormValidation',\n\t\tmixins: [validationMixin],\n\t\tdata: () => ({\n\t\t\tLogin: {\n\t\t\t\tusername: null,\n\t\t\t\tpassword: null,\n\t\t\t},\n\t\t\tRegister: {\n\t\t\t\tusername: null,\n\t\t\t\tpassword: null,\n\t\t\t},\n\t\t\tuserSaved: false,\n\t\t\tsending: false,\n\t\t\tLoginMode: true,\n\t\t}),\n\t\tvalidations: {\n\t\t\tLogin: {\n\t\t\t\tusername: {\n\t\t\t\t\trequired,\n\t\t\t\t\tminLength: minLength(4),\n\t\t\t\t\tmaxLength: maxLength(15),\n\t\t\t\t},\n\t\t\t\tpassword: {\n\t\t\t\t\trequired,\n\t\t\t\t\tminLength: minLength(8),\n\t\t\t\t\tmaxLength: maxLength(20),\n\t\t\t\t}\n\t\t\t},\n\t\t\tRegister: {\n\t\t\t\tusername: {\n\t\t\t\t\trequired,\n\t\t\t\t\tminLength: minLength(4),\n\t\t\t\t\tmaxLength: maxLength(15),\n\t\t\t\t},\n\t\t\t\tpassword: {\n\t\t\t\t\trequired,\n\t\t\t\t\tminLength: minLength(8),\n\t\t\t\t\tmaxLength: maxLength(20),\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tMode() {\n\t\t\t\tthis.LoginMode = !this.LoginMode;\n\t\t\t\tthis.$v.$reset();\n\t\t\t},\n\t\t\tgetValidationClass(fieldName) {\n\t\t\t\t// const field = this.LoginMode ? this.$v.Login[fieldName] : this.$v.Register[fieldName];\n\t\t\t\tconst field = this.$v.Login[fieldName];\n\n\t\t\t\tif (field) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'md-invalid': field.$invalid && field.$dirty,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tclearForm() {\n\t\t\t\tthis.$v.$reset();\n\t\t\t\tif (this.LoginMode) {\n\t\t\t\t\tthis.Login.username = null;\n\t\t\t\t\tthis.Login.password = null;\n\t\t\t\t} else {\n\t\t\t\t\tthis.Register.username = null;\n\t\t\t\t\tthis.Register.password = null;\n\t\t\t\t}\n\t\t\t},\n\t\t\tLoginUser() {\n\t\t\t\tthis.sending = true;\n\t\t\t\tthis.$store.dispatch('LOGIN', {\n\t\t\t\t\tusername: this.Login.username,\n\t\t\t\t\tpassword: this.Login.password,\n\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tthis.sending = false;\n\t\t\t\t\t\tif(this.$store.getters.isLogined) {\n\t\t\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\t\t\ttitle: '로그인 성공!',\n\t\t\t\t\t\t\t\ttext: '로그인에 성공하였습니다.',\n\t\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthis.$router.push(this.$store.getters.getNextDestination);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\t\t\ttitle: '로그인 실패..',\n\t\t\t\t\t\t\t\ttext: '정보를 다시 입력해주세요',\n\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t});\n                        }\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tthis.sending = false;\n\t\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\t\ttitle: '처리중 에러가 발생하였습니다.',\n\t\t\t\t\t\t\ttext: '문제가 발생한것 같습니다.',\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t},\n\t\t\tRegisterUser() {\n\t\t\t\tthis.sending = true;\n\n\t\t\t\t// Instead of this timeout, here you can call your API\n\t\t\t\tAuth.DoRegister({\n\t\t\t\t\tusername: this.Register.username,\n\t\t\t\t\tpassword: this.Register.password,\n\t\t\t\t})\n\t\t\t\t\t.then(result => {\n\t\t\t\t\t\tthis.sending = false;\n\t\t\t\t\t\tthis.LoginMode = true;\n\t\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\t\ttitle: '성공!',\n\t\t\t\t\t\t\ttext: '회원가입이 성공적으로 이루어졌습니다.',\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tthis.sending = false;\n\t\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\t\ttitle: '실패...',\n\t\t\t\t\t\t\ttext: '회원가입에 실패하였습니다.',\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t},\n\t\t\tvalidateUser() {\n\t\t\t\tthis.$v.$touch();\n\n\t\t\t\tif (this.LoginMode && !this.$v.Login.$invalid) {\n\t\t\t\t\tthis.LoginUser();\n\t\t\t\t}\n\t\t\t\tif (!this.LoginMode && !this.$v.Register.$invalid) {\n\t\t\t\t\tthis.RegisterUser();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n</script>\n\n<style lang=\"scss\" scoped>\n    .md-progress-bar {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n    }\n</style>\n"]}]}