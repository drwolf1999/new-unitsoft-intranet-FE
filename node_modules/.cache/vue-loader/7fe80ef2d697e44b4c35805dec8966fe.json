{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kali/Documents/web_application/new-unitsoft-intranet-FE/node_modules/vue-clock-picker/src/components/TimePickerModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kali/Documents/web_application/new-unitsoft-intranet-FE/node_modules/vue-clock-picker/src/components/TimePickerModal.vue","mtime":1491370840000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  HOURS,\n  MINUTES\n} from '../constValues.js'\nimport TimePickerGenerator from './TimePickerGenerator.vue'\nexport default {\n  props: {\n    initStep: {\n      type: Number,\n      default: 0\n    },\n    initHour: {\n      type: [Number, String],\n      default: '00'\n    },\n    initMinute: {\n      type: [Number, String],\n      default: '00'\n    },\n    handleHourChange: {\n      type: Function,\n      default: () => {}\n    },\n    handleMinuteChange: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      step: this.initStep,\n      pointerRotate: () => {\n        this.resetHourDegree()\n      },\n      hour: this.initHour,\n      minute: this.initMinute\n    }\n  },\n  computed: {\n    timeType() {\n      return this.step == 0 ? 'hour' : 'minute'\n    },\n    hourString() {\n      return this.hour < 10 ? '0' + this.hour : this.hour\n    },\n    minuteString() {\n      return this.minute < 10 ? '0' + this.minute : this.minute\n    }\n  },\n  components: {\n    TimePickerGenerator\n  },\n  methods: {\n    handleStepChange(s) {\n      if (s != this.step) {\n        this.step = s\n        this.pointerRotate = s == 0 ? this.resetHourDegree() : this.resetMinuteDegree()\n      }\n    },\n    handleTimePointerClick(time, rotate) {\n      this.pointerRotate = rotate\n      this.handleTimeChange(time)\n      console.log('time changed')\n    },\n    handleTimeChange(time) {\n      time = parseInt(time)\n      if (this.step == 0) {\n        this.hour = time\n        this.handleHourChange && this.handleHourChange(time)\n      } else {\n        this.minute = time\n        this.handleMinuteChange && this.handleMinuteChange(time)\n      }\n    },\n    resetHourDegree() {\n      let h = parseInt(this.hour)\n      let pointerR = 0\n      HOURS.forEach((hour, index) => {\n        if (h === index + 1) {\n          pointerR = index < 12 ? 360 * (index + 1) / 12 : 360 * (index + 1 - 12) / 12\n        }\n      })\n      return pointerR\n    },\n    resetMinuteDegree() {\n      let m = parseInt(this.minute)\n      let pointerR = 0\n      MINUTES.forEach((minute, index) => {\n        if (m === index) {\n          pointerR = 360 * index / 60\n        }\n      })\n      return pointerR\n    }\n  }\n}\n",{"version":3,"sources":["TimePickerModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TimePickerModal.vue","sourceRoot":"node_modules/vue-clock-picker/src/components","sourcesContent":["<template lang=\"pug\">\n\ndiv(class=\"time-picker-modal-container\")\n\tdiv(class=\"time-picker-modal-header\")\n\t\tspan(@click=\"handleStepChange(0)\" class=\"time-picker-header\" ':class'=\"{active:!step}\") {{hourString}}\n\t\t| &nbsp;:&nbsp;\n\t\tspan(@click=\"handleStepChange(1)\" class=\"time-picker-header\" ':class'=\"{active:step}\") {{minuteString}}\n\tdiv(class=\"picker-container\")\n\t\ttime-picker-generator(':handle-time-pointer-click'=\"handleTimePointerClick\" ':type'=\"timeType\" ':hour'=\"hour\" ':minute'=\"minute\")\n\n</template>\n\n<script>\nimport {\n  HOURS,\n  MINUTES\n} from '../constValues.js'\nimport TimePickerGenerator from './TimePickerGenerator.vue'\nexport default {\n  props: {\n    initStep: {\n      type: Number,\n      default: 0\n    },\n    initHour: {\n      type: [Number, String],\n      default: '00'\n    },\n    initMinute: {\n      type: [Number, String],\n      default: '00'\n    },\n    handleHourChange: {\n      type: Function,\n      default: () => {}\n    },\n    handleMinuteChange: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      step: this.initStep,\n      pointerRotate: () => {\n        this.resetHourDegree()\n      },\n      hour: this.initHour,\n      minute: this.initMinute\n    }\n  },\n  computed: {\n    timeType() {\n      return this.step == 0 ? 'hour' : 'minute'\n    },\n    hourString() {\n      return this.hour < 10 ? '0' + this.hour : this.hour\n    },\n    minuteString() {\n      return this.minute < 10 ? '0' + this.minute : this.minute\n    }\n  },\n  components: {\n    TimePickerGenerator\n  },\n  methods: {\n    handleStepChange(s) {\n      if (s != this.step) {\n        this.step = s\n        this.pointerRotate = s == 0 ? this.resetHourDegree() : this.resetMinuteDegree()\n      }\n    },\n    handleTimePointerClick(time, rotate) {\n      this.pointerRotate = rotate\n      this.handleTimeChange(time)\n      console.log('time changed')\n    },\n    handleTimeChange(time) {\n      time = parseInt(time)\n      if (this.step == 0) {\n        this.hour = time\n        this.handleHourChange && this.handleHourChange(time)\n      } else {\n        this.minute = time\n        this.handleMinuteChange && this.handleMinuteChange(time)\n      }\n    },\n    resetHourDegree() {\n      let h = parseInt(this.hour)\n      let pointerR = 0\n      HOURS.forEach((hour, index) => {\n        if (h === index + 1) {\n          pointerR = index < 12 ? 360 * (index + 1) / 12 : 360 * (index + 1 - 12) / 12\n        }\n      })\n      return pointerR\n    },\n    resetMinuteDegree() {\n      let m = parseInt(this.minute)\n      let pointerR = 0\n      MINUTES.forEach((minute, index) => {\n        if (m === index) {\n          pointerR = 360 * index / 60\n        }\n      })\n      return pointerR\n    }\n  }\n}\n</script>\n\n<style lang=\"css\">\n.time-picker-modal-container {\n\twidth:250px;\n  /*position: absolute;*/\n  opacity: 1;\n  z-index: 2;\n  padding: 25px;\n  transition: all 400ms cubic-bezier(0.165, 0.84, 0.44, 1);\n  background-color: #fff;\n  border-radius: 2px;\n  top: 100%;\n  left: 0;\n  transform: translateY(20px);\n  box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.12), 0 0 4px 0 rgba(0, 0, 0, 0.08);\n}\n.time-picker-modal-container:hover{\n\tbox-shadow: 0 8px 8px 0 rgba(0, 0, 0, 0.12), 0 0 8px 0 rgba(0, 0, 0, 0.08);\n}\n.time-picker-modal-header {\n  height: 80px;\n  line-height: 40px;\n  text-align: center;\n  font-size: 2.5em;\n  position: relative;\n}\n\n.time-picker-modal-header .time-picker-header {\n  cursor: pointer;\n}\n.time-picker-modal-header .time-picker-header.active {\n  color: #3498db;\n  cursor: default;\n}\n.time-picker-modal-header .time-picker-header:hover {\n  color: #3498db;\n}\n\n.picker-container {\n  width: 250px;\n  height: 250px;\n  border-radius: 50%;\n  background-color: #e5e5e5;\n  position: relative;\n}\n.picker-center {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  background-color: #3498db;\n  transform: translate(-50%, -50%);\n}\n.picker-pointer {\n  position: absolute;\n  width: 4px;\n  height: 110px;\n  left: 50%;\n  top: 20px;\n  background-color: #3498db;\n  transform-origin: center bottom;\n}\n\n.picker-pointer.animation {\n  transition: all 400ms cubic-bezier(0.165, 0.84, 0.44, 1);\n}\n</style>\n"]}]}