{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kali/Documents/web_application/FE/src/components/students/StudentInformation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kali/Documents/web_application/FE/src/components/students/StudentInformation.vue","mtime":1567302370962},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport StudentService from '../../service/students.js';\nimport SelectForm from '../form/SelectForm.vue';\nimport DiaryStudent from './DiaryStudent.vue';\nimport Date from '../form/Date.vue';\nimport Time from '../form/Time.vue';\nimport Utility from '../../Utility/Utility.js';\n\nexport default {\n    name: 'StudentInformation',\n    data() {\n        return {\n            Student: {\n                _id: 'key',\n                school: 'school',\n                grade: 'grade',\n                phone: 'phone',\n                parent_phone: 'parent phone',\n                unitStudyId: 'unitStudyId',\n            },\n            ModifyingStudent: false,\n            CompletedDiarys: [],\n            noneCompletedDiarys: [],\n            Diary: {\n                teacher: null,\n                lesson_type: null,\n                lesson_time: {\n                    date: Utility.getDateBaseNow(0, 0, 0),\n                    start: Utility.getTimeBaseNow(-3, 0),\n                    end: Utility.getTimeBaseNow(0, 0),\n                },\n                lesson_about: '',\n                lesson_complete: false,\n            },\n            isSelectAll: false,\n            Pay: {\n                Time: 0,\n                Count: 0,\n            },\n            load: {\n                start: Utility.getDateBaseNow(0, -1, 0),\n                end: Utility.getDateBaseNow(0, 0, 0),\n            }\n        };\n    },\n    mounted() {\n        this.$store.dispatch('fetchTeachers');\n        this.$store.dispatch('fetchLessons');\n        this.fetchStudent();\n        this.fetchStudentDiarys();\n    },\n    computed: {\n        getTeachers() {\n            const TeachersInfo = this.$store.getters.getTeachers;\n            let ret = [];\n            TeachersInfo.forEach(teacher => {\n                ret.push({\n                    id: teacher._id,\n                    name: teacher.name,\n                });\n            });\n            return ret;\n        },\n        getLessons() {\n            const LessonsInfo = this.$store.getters.getLessons;\n            let ret = [];\n            LessonsInfo.forEach(lesson => {\n                ret.push({\n                    id: lesson._id,\n                    name: lesson.type,\n                });\n            });\n            return ret;\n        },\n    },\n    methods: {\n        AllSelect() {\n            this.isSelectAll = !this.isSelectAll;\n        },\n        modifyStudent() {\n            this.ModifyingStudent = true;\n        },\n        doModifyStudent() {\n            this.ModifyingStudent = false;\n            StudentService.updateStudent(this.Student._id, this.Student)\n                .then((response) => {\n                    this.$notify({\n                        title: response.data.message,\n                        text: '수정 되었습니다.',\n                        type: 'success',\n                    });\n                    this.Student = response.data.Student;\n                })\n                .catch(error => {\n                    this.$notify({\n                        title: error.data.message,\n                        text: '실패하였습니다.',\n                        type: 'error',\n                    });\n                    console.log(error);\n                });\n        },\n        onChangeTeachers(value) {\n            this.Diary.teacher = value;\n        },\n        onChangeLessons(value) {\n            this.Diary.lesson_type = value;\n        },\n        onChangeDiaryDate(value) {\n            this.Diary.lesson_time.date = value;\n        },\n        onChangeDiaryStart(value) {\n            this.Diary.lesson_time.start = value;\n        },\n        onChangeDiaryEnd(value) {\n            this.Diary.lesson_time.end = value;\n        },\n        onChangeReloadStart(value) {\n            this.load.start = value;\n        },\n        onChangeReloadEnd(value) {\n            this.load.end = value;\n        },\n        isValidDiaryDuration() {\n            if (this.Diary.lesson_time.date === '' || this.Diary.lesson_time.start === '' || this.Diary.lesson_time.end === '')\n                return false;\n            else if (Utility.compareTime(this.Diary.lesson_time.start, this.Diary.lesson_time.end) >= 0)\n                return false;\n            return true;\n        },\n        isValidDiaryTeacher() {\n            return this.Diary.teacher !== null;\n        },\n        isValidDiaryLesson() {\n            return this.Diary.lesson_type !== null;\n        },\n        onChangeDiary(value, type, typeValue) {\n            value.lesson_time.date = Utility.StringToDate(value.lesson_time.date);\n            StudentService.updateStudentDiary(value._id, {\n                lesson_complete: value.lesson_complete,\n                lesson_time: JSON.stringify(value.lesson_time),\n                lesson_about: value.lesson_about,\n            })\n                .then(response => {\n                    this.$notify({\n                        title: response.data.msg,\n                        text: '성공!',\n                        type: 'success',\n                    });\n                    if (type === 'Complete') {\n                        this.CompletedDiarys.push(value);\n                        this.noneCompletedDiarys = Utility.removeElemntByValue(this.noneCompletedDiarys, value);\n                        this.Pay.Count--;\n                        this.Pay.Time -= Utility.duration(value.lesson_time.start, value.lesson_time.end);\n                    } else if (type === 'Edit') {\n                        this.Pay.Time += Utility.duration(typeValue.start, typeValue.end) - Utility.duration(value.lesson_time.start, value.lesson_time.end);\n                    }\n                })\n                .catch(error => {\n                    console.log(error);\n                });\n        },\n        fetchStudent() {\n            StudentService.getStudent(this.$route.params.StudentId)\n                .then((response) => {\n                    this.Student = response.data.student;\n                    this.$notify({\n                        title: this.Student,\n                        type: 'success',\n                    });\n                })\n                .catch(error => {\n                    this.$notify({\n                        title: '학생 정보를 가져오는데 문제가 발생하였습니다.',\n                        text: '관리자에게 문의 바랍니다.',\n                        type: 'error',\n                    });\n                    console.log(error);\n                });\n        },\n        fetchStudentDiarys() {\n            StudentService.getStudentDiaryByStudentId(this.$route.params.StudentId, {\n                start: this.load.start,\n                end: this.load.end,\n            })\n                .then((response) => {\n                    response.data.Diarys.forEach(diary => {\n                        if (diary.lesson_complete) {\n                            this.CompletedDiarys.push(diary);\n                        } else {\n                            this.noneCompletedDiarys.push(diary);\n                            this.Pay.Time += parseFloat(Utility.duration(diary.lesson_time.start, diary.lesson_time.end));\n                            this.Pay.Count++;\n                        }\n                    });\n                    this.$notify({\n                        title: '성공적으로 로딩했습니다.',\n                        // text: error,\n                        type: 'success',\n                    });\n                })\n                .catch(error => {\n                    this.$notify({\n                        title: '에러 발생!',\n                        text: error,\n                        type: 'error',\n                    });\n                    console.log(error);\n                });\n        },\n        AddStudentDiary() {\n            if (!this.isValidDiaryDuration()) {\n                this.$notify({\n                    title: '시간이 잘 못 입력되었습니다.',\n                    text: '종료시간이 더 빠릅니다.',\n                    type: 'error',\n                });\n                return;\n            } else if (!this.isValidDiaryTeacher()) {\n                this.$notify({\n                    title: '지도한 선생님을 입력해주세요',\n                    text: '다시 입력해주세요',\n                    type: 'error',\n                });\n                return;\n            } else if (!this.isValidDiaryLesson()) {\n                this.$notify({\n                    title: '수업한 내용을 입력해주세요',\n                    text: '다시 입력해주세요',\n                    type: 'error',\n                });\n                return;\n            }\n            StudentService.addStudentDiary({\n                student_id: this.Student._id,\n                teacher: this.Diary.teacher,\n                lesson_type: this.Diary.lesson_type,\n                lesson_time: JSON.stringify(this.Diary.lesson_time),\n                lesson_about: this.Diary.lesson_about,\n            })\n                .then((response) => {\n                    this.$notify({\n                        title: response.data.msg,\n                        text: '성공!',\n                        type: 'success',\n                    });\n                    this.Pay.Count++;\n                    this.Pay.Time += parseFloat(Utility.duration(response.data.Diary.lesson_time.start, response.data.Diary.lesson_time.end));\n                    this.noneCompletedDiarys.push(response.data.Diary);\n                })\n                .catch((error) => {\n                    this.$notify({\n                        title: '실패..',\n                        text: '실패..',\n                        type: 'error',\n                    });\n                    console.log(error);\n                });\n        },\n    },\n    components: {\n        SelectForm,\n        DiaryStudent,\n        Date,\n        Time,\n    },\n};\n",{"version":3,"sources":["StudentInformation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"StudentInformation.vue","sourceRoot":"src/components/students","sourcesContent":["<template>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-10\">\n                <br/>\n                <h4>{{ Student.name }}</h4>\n                <br/>\n                <div class=\"row\">\n                    <div class=\"input-field col s5\">\n                        <label for=\"school\" class=\"active\">학교</label>\n                        <input type=\"text\" name=\"school\" v-model=\"Student.school\" id=\"school\"\n                               :disabled=\"!ModifyingStudent\" placeholder=\"학교\">\n                    </div>\n                    <div class=\"input-field col s5\">\n                        <label for=\"grade\" class=\"active\">학년</label>\n                        <input type=\"text\" name=\"grade\" v-model=\"Student.grade\" id=\"grade\"\n                               :disabled=\"!ModifyingStudent\" placeholder=\"학년\">\n                    </div>\n                    <div class=\"input-field col s5\">\n                        <label for=\"phone\" class=\"active\">학생 전화번호</label>\n                        <input type=\"text\" name=\"phone\" v-model=\"Student.phone\" id=\"phone\"\n                               :disabled=\"!ModifyingStudent\" placeholder=\"전화번호\">\n                    </div>\n                    <div class=\"input-field col s5\">\n                        <label for=\"parent-phone\" class=\"active\">부모님 전화번호</label>\n                        <input type=\"text\" name=\"parent-phone\" v-model=\"Student.parent_phone\" id=\"parent-phone\"\n                               :disabled=\"!ModifyingStudent\" placeholder=\"부모님 전화번호\">\n                    </div>\n                    <div class=\"input-field col s5\">\n                        <label for=\"unitStudy-id\" class=\"active\">유닛스터디 ID</label>\n                        <input type=\"text\" name=\"unitStudy-id\" v-model=\"Student.unitStudyId\" id=\"unitStudy-id\"\n                               :disabled=\"true\" placeholder=\"unitStudyID\">\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <button v-if=\"!ModifyingStudent\" class=\"btn\" @click=\"modifyStudent()\" id=\"change-btn\">\n                        <i class=\"icon icon-pencil\"></i> 수정하기\n                    </button>\n                    <button v-else class=\"btn\" @click=\"doModifyStudent()\" id=\"do-chang-btn\">\n                        <i class=\"icon icon-pencil\"></i>완료\n                    </button>\n                </div>\n            </div>\n        </div>\n        <h4>일지 추가</h4>\n        <div class=\"form-control\">\n            {{ CompletedDiarys }}\n            {{ getTeachers }}\n            {{ getLessons }}\n            {{ Diary }}\n            <div class=\"row\">\n                <Date class=\"input-field col s4\" v-bind:date=\"Diary.lesson_time.date\" label=\"날짜\"\n                      v-on:input=\"onChangeDiaryDate\"></Date>\n                <Time class=\"input-field col s4\" v-bind:time=\"Diary.lesson_time.start\" label=\"시작 시간\"\n                      v-on:input=\"onChangeDiaryStart\"></Time>\n                <Time class=\"input-field col s4\" v-bind:time=\"Diary.lesson_time.end\" label=\"종료 시간\"\n                      v-on:input=\"onChangeDiaryEnd\"></Time>\n            </div>\n            <div class=\"row\">\n                <SelectForm class=\"input-field col s6\" v-bind:selectList=\"getTeachers\" v-on:input=\"onChangeTeachers\"\n                            name=\"담당 선생님\"></SelectForm>\n                <SelectForm class=\"input-field col s6\" v-bind:selectList=\"getLessons\" v-on:input=\"onChangeLessons\"\n                            name=\"수업 종류\"></SelectForm>\n            </div>\n            <div class=\"row\">\n                <div class=\"input-field col s12\">\n                    <label class=\"active\">상세 내용</label>\n                    <input type=\"text\" id=\"lesson-about\" v-model=\"Diary.lesson_about\">\n                </div>\n                <button class=\"btn waves-effect waves-light\" id=\"add-studentdiary-btn\" @click=\"AddStudentDiary()\"\n                        name=\"action\">일지추가\n                    <i class=\"material-icons right\">send</i>\n                </button>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <h4>일지</h4>\n            <table>\n                <tr>\n                    <th style=\"width: 30%\">횟수 / 시간</th>\n                    <td style=\"width: 70%\">\n                        <div class=\"input-field inline s2\">\n                            <input disabled type=\"text\" v-model=\"Pay.Count\" id=\"total-count\">\n                        </div>\n                        <div class=\"input-field inline s2\">\n                            <input disabled type=\"text\" v-model=\"Pay.Time\" id=\"total-time\">\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <th>미결제 일지 <br><br><label><input type=\"checkbox\" id=\"diary-check-all\"\n                                                     @click=\"AllSelect\"><span>전체 선택</span></label>\n                    </th>\n                    <td>\n                        <div id=\"uncomplete-diary-list\">\n                            <div>\n                                <div v-for=\"diary in noneCompletedDiarys\">\n                                    <DiaryStudent v-bind:DiaryInfo=\"diary\" v-on:update=\"onChangeDiary\"></DiaryStudent>\n                                </div>\n                            </div>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <th>\n                        {{ load }}\n                        일지\n                        <br>\n                        <Date class=\"input-field col s6\" v-bind:date=\"load.start\" label=\"시작\"\n                              v-on:input=\"onChangeReloadStart\"></Date>\n                        <Date class=\"input-field col s6\" v-bind:date=\"load.end\" label=\"끝\"\n                              v-on:input=\"onChangeReloadEnd\"></Date>\n                    </th>\n                    <td>\n                        <div id=\"diary-list\">\n                            <div v-for=\"diary in CompletedDiarys\">\n                                <DiaryStudent v-bind:DiaryInfo=\"diary\"></DiaryStudent>\n                            </div>\n                        </div>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</template>\n\n<script>\n    import StudentService from '../../service/students.js';\n    import SelectForm from '../form/SelectForm.vue';\n    import DiaryStudent from './DiaryStudent.vue';\n    import Date from '../form/Date.vue';\n    import Time from '../form/Time.vue';\n    import Utility from '../../Utility/Utility.js';\n\n    export default {\n        name: 'StudentInformation',\n        data() {\n            return {\n                Student: {\n                    _id: 'key',\n                    school: 'school',\n                    grade: 'grade',\n                    phone: 'phone',\n                    parent_phone: 'parent phone',\n                    unitStudyId: 'unitStudyId',\n                },\n                ModifyingStudent: false,\n                CompletedDiarys: [],\n                noneCompletedDiarys: [],\n                Diary: {\n                    teacher: null,\n                    lesson_type: null,\n                    lesson_time: {\n                        date: Utility.getDateBaseNow(0, 0, 0),\n                        start: Utility.getTimeBaseNow(-3, 0),\n                        end: Utility.getTimeBaseNow(0, 0),\n                    },\n                    lesson_about: '',\n                    lesson_complete: false,\n                },\n                isSelectAll: false,\n                Pay: {\n                    Time: 0,\n                    Count: 0,\n                },\n                load: {\n                    start: Utility.getDateBaseNow(0, -1, 0),\n                    end: Utility.getDateBaseNow(0, 0, 0),\n                }\n            };\n        },\n        mounted() {\n            this.$store.dispatch('fetchTeachers');\n            this.$store.dispatch('fetchLessons');\n            this.fetchStudent();\n            this.fetchStudentDiarys();\n        },\n        computed: {\n            getTeachers() {\n                const TeachersInfo = this.$store.getters.getTeachers;\n                let ret = [];\n                TeachersInfo.forEach(teacher => {\n                    ret.push({\n                        id: teacher._id,\n                        name: teacher.name,\n                    });\n                });\n                return ret;\n            },\n            getLessons() {\n                const LessonsInfo = this.$store.getters.getLessons;\n                let ret = [];\n                LessonsInfo.forEach(lesson => {\n                    ret.push({\n                        id: lesson._id,\n                        name: lesson.type,\n                    });\n                });\n                return ret;\n            },\n        },\n        methods: {\n            AllSelect() {\n                this.isSelectAll = !this.isSelectAll;\n            },\n            modifyStudent() {\n                this.ModifyingStudent = true;\n            },\n            doModifyStudent() {\n                this.ModifyingStudent = false;\n                StudentService.updateStudent(this.Student._id, this.Student)\n                    .then((response) => {\n                        this.$notify({\n                            title: response.data.message,\n                            text: '수정 되었습니다.',\n                            type: 'success',\n                        });\n                        this.Student = response.data.Student;\n                    })\n                    .catch(error => {\n                        this.$notify({\n                            title: error.data.message,\n                            text: '실패하였습니다.',\n                            type: 'error',\n                        });\n                        console.log(error);\n                    });\n            },\n            onChangeTeachers(value) {\n                this.Diary.teacher = value;\n            },\n            onChangeLessons(value) {\n                this.Diary.lesson_type = value;\n            },\n            onChangeDiaryDate(value) {\n                this.Diary.lesson_time.date = value;\n            },\n            onChangeDiaryStart(value) {\n                this.Diary.lesson_time.start = value;\n            },\n            onChangeDiaryEnd(value) {\n                this.Diary.lesson_time.end = value;\n            },\n            onChangeReloadStart(value) {\n                this.load.start = value;\n            },\n            onChangeReloadEnd(value) {\n                this.load.end = value;\n            },\n            isValidDiaryDuration() {\n                if (this.Diary.lesson_time.date === '' || this.Diary.lesson_time.start === '' || this.Diary.lesson_time.end === '')\n                    return false;\n                else if (Utility.compareTime(this.Diary.lesson_time.start, this.Diary.lesson_time.end) >= 0)\n                    return false;\n                return true;\n            },\n            isValidDiaryTeacher() {\n                return this.Diary.teacher !== null;\n            },\n            isValidDiaryLesson() {\n                return this.Diary.lesson_type !== null;\n            },\n            onChangeDiary(value, type, typeValue) {\n                value.lesson_time.date = Utility.StringToDate(value.lesson_time.date);\n                StudentService.updateStudentDiary(value._id, {\n                    lesson_complete: value.lesson_complete,\n                    lesson_time: JSON.stringify(value.lesson_time),\n                    lesson_about: value.lesson_about,\n                })\n                    .then(response => {\n                        this.$notify({\n                            title: response.data.msg,\n                            text: '성공!',\n                            type: 'success',\n                        });\n                        if (type === 'Complete') {\n                            this.CompletedDiarys.push(value);\n                            this.noneCompletedDiarys = Utility.removeElemntByValue(this.noneCompletedDiarys, value);\n                            this.Pay.Count--;\n                            this.Pay.Time -= Utility.duration(value.lesson_time.start, value.lesson_time.end);\n                        } else if (type === 'Edit') {\n                            this.Pay.Time += Utility.duration(typeValue.start, typeValue.end) - Utility.duration(value.lesson_time.start, value.lesson_time.end);\n                        }\n                    })\n                    .catch(error => {\n                        console.log(error);\n                    });\n            },\n            fetchStudent() {\n                StudentService.getStudent(this.$route.params.StudentId)\n                    .then((response) => {\n                        this.Student = response.data.student;\n                        this.$notify({\n                            title: this.Student,\n                            type: 'success',\n                        });\n                    })\n                    .catch(error => {\n                        this.$notify({\n                            title: '학생 정보를 가져오는데 문제가 발생하였습니다.',\n                            text: '관리자에게 문의 바랍니다.',\n                            type: 'error',\n                        });\n                        console.log(error);\n                    });\n            },\n            fetchStudentDiarys() {\n                StudentService.getStudentDiaryByStudentId(this.$route.params.StudentId, {\n                    start: this.load.start,\n                    end: this.load.end,\n                })\n                    .then((response) => {\n                        response.data.Diarys.forEach(diary => {\n                            if (diary.lesson_complete) {\n                                this.CompletedDiarys.push(diary);\n                            } else {\n                                this.noneCompletedDiarys.push(diary);\n                                this.Pay.Time += parseFloat(Utility.duration(diary.lesson_time.start, diary.lesson_time.end));\n                                this.Pay.Count++;\n                            }\n                        });\n                        this.$notify({\n                            title: '성공적으로 로딩했습니다.',\n                            // text: error,\n                            type: 'success',\n                        });\n                    })\n                    .catch(error => {\n                        this.$notify({\n                            title: '에러 발생!',\n                            text: error,\n                            type: 'error',\n                        });\n                        console.log(error);\n                    });\n            },\n            AddStudentDiary() {\n                if (!this.isValidDiaryDuration()) {\n                    this.$notify({\n                        title: '시간이 잘 못 입력되었습니다.',\n                        text: '종료시간이 더 빠릅니다.',\n                        type: 'error',\n                    });\n                    return;\n                } else if (!this.isValidDiaryTeacher()) {\n                    this.$notify({\n                        title: '지도한 선생님을 입력해주세요',\n                        text: '다시 입력해주세요',\n                        type: 'error',\n                    });\n                    return;\n                } else if (!this.isValidDiaryLesson()) {\n                    this.$notify({\n                        title: '수업한 내용을 입력해주세요',\n                        text: '다시 입력해주세요',\n                        type: 'error',\n                    });\n                    return;\n                }\n                StudentService.addStudentDiary({\n                    student_id: this.Student._id,\n                    teacher: this.Diary.teacher,\n                    lesson_type: this.Diary.lesson_type,\n                    lesson_time: JSON.stringify(this.Diary.lesson_time),\n                    lesson_about: this.Diary.lesson_about,\n                })\n                    .then((response) => {\n                        this.$notify({\n                            title: response.data.msg,\n                            text: '성공!',\n                            type: 'success',\n                        });\n                        this.Pay.Count++;\n                        this.Pay.Time += parseFloat(Utility.duration(response.data.Diary.lesson_time.start, response.data.Diary.lesson_time.end));\n                        this.noneCompletedDiarys.push(response.data.Diary);\n                    })\n                    .catch((error) => {\n                        this.$notify({\n                            title: '실패..',\n                            text: '실패..',\n                            type: 'error',\n                        });\n                        console.log(error);\n                    });\n            },\n        },\n        components: {\n            SelectForm,\n            DiaryStudent,\n            Date,\n            Time,\n        },\n    };\n</script>"]}]}